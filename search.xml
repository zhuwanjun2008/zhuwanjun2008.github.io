<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CentOS安装DNS双机</title>
      <link href="/2018/11/08/CentOS%E5%AE%89%E8%A3%85DNS%E5%8F%8C%E6%9C%BA/"/>
      <url>/2018/11/08/CentOS%E5%AE%89%E8%A3%85DNS%E5%8F%8C%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>CentOS版本： CentOS 7.x 64bit</p><p>DNS版本：yum安装bind-chroot</p><p>生产环境需要搭建DNS服务，解析内部域名，外部域名则转发给外部DNS服务器</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h4><p>yum安装DNS服务和依赖</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">yum install <span class="keyword">bind</span>-<span class="keyword">chroot</span></span><br></pre></td></tr></table></figure><p>启动named-chroot服务</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">systemctl start <span class="keyword">named</span>-chroot</span><br><span class="line">systemctl enable <span class="keyword">named</span>-chroot</span><br></pre></td></tr></table></figure><p>修改/etc/named.conf配置</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// named.conf</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS</span></span><br><span class="line"><span class="comment">// server as a caching only nameserver (as a localhost DNS resolver only).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// See /usr/share/doc/bind*/sample/ for example named configuration files.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">        listen-<span class="keyword">on</span> port 53 &#123; any; &#125;;</span><br><span class="line">        <span class="comment">//listen-on-v6 port 53 &#123; ::1; &#125;;</span></span><br><span class="line">        directory       <span class="string">"/var/named"</span>;</span><br><span class="line">        dump-<span class="keyword">file</span>       <span class="string">"/var/named/data/cache_dump.db"</span>;</span><br><span class="line">        statistics-<span class="keyword">file</span> <span class="string">"/var/named/data/named_stats.txt"</span>;</span><br><span class="line">        memstatistics-<span class="keyword">file</span> <span class="string">"/var/named/data/named_mem_stats.txt"</span>;</span><br><span class="line">        allow-<span class="keyword">query</span>     &#123; any; &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.</span></span><br><span class="line"><span class="comment">         - If you are building a RECURSIVE (caching) DNS server, you need to enable </span></span><br><span class="line"><span class="comment">           recursion. </span></span><br><span class="line"><span class="comment">         - If your recursive DNS server has a public IP address, you MUST enable access </span></span><br><span class="line"><span class="comment">           control to limit queries to your legitimate users. Failing to do so will</span></span><br><span class="line"><span class="comment">           cause your server to become part of large scale DNS amplification </span></span><br><span class="line"><span class="comment">           attacks. Implementing BCP38 within your network would greatly                          </span></span><br><span class="line"><span class="comment">           reduce such attack surface                                                             </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">                                                                                                  </span><br><span class="line">        recursion yes;                                                                            </span><br><span class="line">        allow-recursion &#123; 0.0.0.0/0; &#125;;                                                           </span><br><span class="line">                                                                                                  </span><br><span class="line">        forward first;                                                                            </span><br><span class="line">        forwarders &#123;                                                                              </span><br><span class="line">            119.29.29.29;                                                                         </span><br><span class="line">            114.114.114.114;                                                                      </span><br><span class="line">        &#125;;                                                                                        </span><br><span class="line">                                                                                                  </span><br><span class="line">        dnssec-enable <span class="keyword">no</span>;                                                                         </span><br><span class="line">        dnssec-validation <span class="keyword">no</span>;                                                                     </span><br><span class="line">        dnssec-lookaside <span class="keyword">no</span>;                                                                      </span><br><span class="line">                                                                                                  </span><br><span class="line">        <span class="comment">/* Path to ISC DLV key */</span>                                                                 </span><br><span class="line">        bindkeys-<span class="keyword">file</span> <span class="string">"/etc/named.iscdlv.key"</span>;                                                    </span><br><span class="line">                                                                                                  </span><br><span class="line">        managed-keys-directory <span class="string">"/var/named/dynamic"</span>;                                              </span><br><span class="line">                                                                                                  </span><br><span class="line">        pid-<span class="keyword">file</span> <span class="string">"/run/named/named.pid"</span>;                                                          </span><br><span class="line">        session-keyfile <span class="string">"/run/named/session.key"</span>;                                                 </span><br><span class="line">&#125;; </span><br><span class="line">logging &#123;</span><br><span class="line">        channel default_debug &#123;</span><br><span class="line">                <span class="keyword">file</span> <span class="string">"data/named.run"</span>;                                                            </span><br><span class="line">                severity dynamic;                                                                 </span><br><span class="line">        &#125;;                                                                                        </span><br><span class="line">&#125;;                                                                                                </span><br><span class="line">                                                                                                  </span><br><span class="line">zone <span class="string">"."</span> <span class="keyword">IN</span> &#123;                                                                                     </span><br><span class="line">        <span class="keyword">type</span> hint;                                                                                </span><br><span class="line">        <span class="keyword">file</span> <span class="string">"named.ca"</span>;                                                                          </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">zone <span class="string">"linglongtech.local"</span> <span class="keyword">IN</span> &#123;                                                                                     </span><br><span class="line">        <span class="keyword">type</span> master;                                                                                               </span><br><span class="line">        <span class="keyword">file</span> <span class="string">"linglongtech.local.zone"</span>;                                                                            </span><br><span class="line">        allow-transfer &#123; 192.168.1.6; &#125;;                                                                           </span><br><span class="line">        allow-<span class="keyword">query</span> &#123; any; &#125;;                                                                                      </span><br><span class="line"></span><br><span class="line">&#125;;                                                                                                </span><br><span class="line">zone <span class="string">"linglongtech.com"</span> <span class="keyword">IN</span> &#123;                                                                                       </span><br><span class="line">        <span class="keyword">type</span> master;                                                                                               </span><br><span class="line">        <span class="keyword">file</span> <span class="string">"linglongtech.com.zone"</span>;                                                                              </span><br><span class="line">        allow-transfer &#123; 192.168.1.6; &#125;;                                                                           </span><br><span class="line">        allow-<span class="keyword">query</span> &#123; any; &#125;;                                                                                      </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">"/etc/named.rfc1912.zones"</span>;                                                               </span><br><span class="line"><span class="keyword">include</span> <span class="string">"/etc/named.root.key"</span>;</span><br></pre></td></tr></table></figure><p>修改/var/named/linglongtech.local.zone和/var/named/linglongtech.local.zone</p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ORIGIN</span> linglongtech.local.</span><br><span class="line"><span class="meta">$TTL</span> <span class="number">600</span></span><br><span class="line"></span><br><span class="line">@      <span class="keyword">IN</span>  <span class="keyword">SOA</span>         dns1.linglongtech.local. root.linglongtech.local. (</span><br><span class="line">                       <span class="number">20151009</span></span><br><span class="line">                       <span class="number">3600</span></span><br><span class="line">                       <span class="number">3600</span></span><br><span class="line">                       <span class="number">604800</span></span><br><span class="line">                       <span class="number">86400</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">@      <span class="keyword">IN</span>  <span class="keyword">NS</span>          vboxdns1.linglongtech.local.</span><br><span class="line">       <span class="keyword">IN</span>  <span class="keyword">NS</span>          vboxdns2.linglongtech.local.</span><br><span class="line"></span><br><span class="line">vboxdns1   <span class="keyword">IN</span>  <span class="keyword">A</span>       <span class="number">10.105.29.36</span></span><br><span class="line">vboxdns2   <span class="keyword">IN</span>  <span class="keyword">A</span>       <span class="number">10.105.61.255</span></span><br><span class="line"></span><br><span class="line">vboxdb <span class="keyword">IN</span>  <span class="keyword">A</span>           <span class="number">10.66.147.50</span></span><br><span class="line"></span><br><span class="line">vboxhyperic <span class="keyword">IN</span> <span class="keyword">A</span>       <span class="number">10.143.52.85</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ORIGIN</span> linglongtech<span class="selector-class">.com</span>.</span><br><span class="line"><span class="variable">$TTL</span> <span class="number">600</span></span><br><span class="line"></span><br><span class="line">@      IN  SOA         dns1<span class="selector-class">.linglongtech</span><span class="selector-class">.com</span>. root<span class="selector-class">.linglongtech</span><span class="selector-class">.com</span>. (</span><br><span class="line">                       <span class="number">20151009</span></span><br><span class="line">                       <span class="number">3600</span></span><br><span class="line">                       <span class="number">3600</span></span><br><span class="line">                       <span class="number">604800</span></span><br><span class="line">                       <span class="number">86400</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">@      IN  NS          vboxdns1<span class="selector-class">.linglongtech</span><span class="selector-class">.com</span>.</span><br><span class="line">       IN  NS          vboxdns2<span class="selector-class">.linglongtech</span><span class="selector-class">.com</span>.</span><br><span class="line"></span><br><span class="line">vboxdns1   IN  A       <span class="number">10.105</span>.<span class="number">29.36</span></span><br><span class="line">vboxdns2   IN  A       <span class="number">10.105</span>.<span class="number">61.255</span></span><br></pre></td></tr></table></figure><p>防火墙要求开通TCP和UDP的53端口</p><p>启动DNS服务</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">systemctl start <span class="keyword">named</span></span><br><span class="line">systemctl enable <span class="keyword">named</span></span><br></pre></td></tr></table></figure><h4 id="备机"><a href="#备机" class="headerlink" title="备机"></a>备机</h4><p>修改/etc/named.conf</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">zone <span class="string">"linglongtech.local"</span> <span class="keyword">IN</span> &#123;</span><br><span class="line">       <span class="built_in"> type </span>slave;</span><br><span class="line">        file <span class="string">"slaves/linglongtech.local.zone"</span>;</span><br><span class="line">        masters &#123; 192.168.1.5; &#125;;</span><br><span class="line">        allow-query &#123; any; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">"linglongtech.com"</span> <span class="keyword">IN</span> &#123;</span><br><span class="line">       <span class="built_in"> type </span>slave;</span><br><span class="line">        file <span class="string">"slaves/linglongtech.com.zone"</span>;</span><br><span class="line">        masters &#123; 192.168.1.5; &#125;;</span><br><span class="line">        allow-query &#123; any; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其余配置同主机相同</p><h3 id="监控脚本"><a href="#监控脚本" class="headerlink" title="监控脚本"></a>监控脚本</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line">import dns.resolver</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def query_domain(nameserverIP,domainName):</span><br><span class="line"></span><br><span class="line">    resolver = dns.resolver.Resolver(configure=<span class="keyword">False</span>)</span><br><span class="line">    resolver.nameservers = [nameserverIP]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = resolver.query(domainName, <span class="string">'A'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(answer) &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(<span class="keyword">False</span>)</span><br><span class="line">    except:</span><br><span class="line">        <span class="keyword">return</span>(<span class="keyword">False</span>)</span><br><span class="line">        </span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    nameserverIPs = [<span class="string">'192.168.1.5'</span>,<span class="string">'192.168.1.6'</span>]</span><br><span class="line"></span><br><span class="line">    domainNames = [<span class="string">'www.baidu.com'</span>,\                                                              </span><br><span class="line">                   <span class="string">'api.weixin.qq.com'</span>,<span class="string">'graph.qq.com'</span>,<span class="string">'proxy-ling.jd.com'</span>,<span class="string">'api.ximalaya.com'</span>,\    </span><br><span class="line">                   <span class="string">'vboxmongodb1.linglongtech.com'</span>,<span class="string">'logs.linglongtech.com'</span>,\                      </span><br><span class="line">                   <span class="string">'vboxdb.linglongtech.local'</span>,<span class="string">'vboxmem.linglongtech.local'</span>,<span class="string">'vboxdns1.linglongtech.local'</span>,<span class="string">'vboxdns2.</span></span><br><span class="line"><span class="string">linglongtech.local'</span>]</span><br><span class="line">                                                                                                  </span><br><span class="line">    <span class="keyword">for</span> x in nameserverIPs:                                                                       </span><br><span class="line">        <span class="keyword">for</span> y in domainNames:                                                                     </span><br><span class="line">                                                                                                  </span><br><span class="line">            <span class="comment">#print(x,y)                                                                           </span></span><br><span class="line">            <span class="comment">#print(query_domain(x,y))                                                             </span></span><br><span class="line">                                                                                                  </span><br><span class="line">            <span class="keyword">if</span> query_domain(x,y):                                                                 </span><br><span class="line">                <span class="keyword">continue</span>                                                                          </span><br><span class="line">            <span class="keyword">else</span>:                                                                                 </span><br><span class="line">                <span class="keyword">print</span>(<span class="number">1</span>)                                                                          </span><br><span class="line">                sys.<span class="keyword">exit</span>(<span class="number">0</span>)                                                                       </span><br><span class="line">                                                                                                  </span><br><span class="line">    <span class="keyword">print</span>(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:                                                                        </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python操作数据库两例</title>
      <link href="/2018/11/08/Python%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%A4%E4%BE%8B/"/>
      <url>/2018/11/08/Python%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%A4%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="访问SQLServer批量调用URL"><a href="#访问SQLServer批量调用URL" class="headerlink" title="访问SQLServer批量调用URL"></a>访问SQLServer批量调用URL</h3><p>1.安装pymssql；</p><p>2.python脚本访问数据库，获取指定字段信息；</p><p>3.字段信息作为参数，拼接URL；</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import pymssql</span><br><span class="line">import httplib</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">conn = pymssql.connect(host='xxx.xxx.xxx.xxx', user='xx', password='xxxx', database='xxx')</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute('<span class="keyword">SELECT</span> UserID,Cover.CoverID <span class="keyword">FROM</span> CoverDetail <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Cover <span class="keyword">ON</span> CoverDetail.CoverID = Cover.CoverID <span class="keyword">WHERE</span> SoundPath <span class="keyword">LIKE</span> \<span class="string">'20%\''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">row</span> = cur.fetchone()</span><br><span class="line"></span><br><span class="line"><span class="keyword">count</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">row</span>:</span><br><span class="line">    httpconn = httplib.HTTPConnection(<span class="string">"xxx.xxx.xxx.xxx:xxxx"</span>)</span><br><span class="line">    httpconn.request(<span class="string">"GET"</span>, <span class="string">"/covers/del?uid="</span>+<span class="keyword">str</span>(<span class="built_in">int</span>(<span class="keyword">row</span>[<span class="number">0</span>]))+<span class="string">"&amp;coverid="</span>+<span class="keyword">str</span>(<span class="built_in">int</span>(<span class="keyword">row</span>[<span class="number">1</span>])))</span><br><span class="line">    rps = httpconn.getresponse()</span><br><span class="line">    print <span class="keyword">str</span>(<span class="keyword">count</span>)+<span class="string">" "</span>+rps.read()</span><br><span class="line">    <span class="keyword">row</span> = cur.fetchone()</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">count</span> = <span class="keyword">count</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="读取文本批量更新MySQL"><a href="#读取文本批量更新MySQL" class="headerlink" title="读取文本批量更新MySQL"></a>读取文本批量更新MySQL</h3><p>1.从制定目录读取文本文件，根据文件内容更新Mysql数据库相应字段信息；</p><p>2.依赖MySQLdb库，单独下载安装；</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">Linux下安装方法：yum <span class="keyword">install</span> MySQL-python</span><br><span class="line">Windows下需下载安装包</span><br></pre></td></tr></table></figure><p>3.MySQL使用UTF-8编码，在数据库连接串中增加相应配置</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import MySQLdb</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def comment_update(commentid):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn=MySQLdb.connect(host=<span class="string">'xxx.xxx.xxx.xxx'</span>,user=<span class="string">'xx'</span>,passwd=<span class="string">'xxxxx'</span>,db=<span class="string">'xxxx'</span>,port=xxxx,charset=<span class="string">'utf8'</span>)</span><br><span class="line">        cur=conn.cursor()</span><br><span class="line">        <span class="keyword">if</span> cur.execute(<span class="string">'update comment set content = "xxxxx" where id = '</span> + commentid) == <span class="number">1</span>:</span><br><span class="line">            conn.commit()</span><br><span class="line">            cur.<span class="built_in">close</span>()</span><br><span class="line">            conn.<span class="built_in">close</span>()</span><br><span class="line">            <span class="literal">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="literal">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    except MySQLdb.Error,e:</span><br><span class="line">        <span class="comment">#print "Mysql Error %d: %s" % (e.args[0], e.args[1])</span></span><br><span class="line">        <span class="literal">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">'CommentID.txt'</span>):</span><br><span class="line">            <span class="built_in">time</span>.sleep(<span class="number">5</span>)</span><br><span class="line">            os.<span class="built_in">rename</span>(<span class="string">'CommentID.txt'</span>,<span class="string">'CommentID_process.txt'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">30</span>):</span><br><span class="line">                print <span class="built_in">time</span>.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,<span class="built_in">time</span>.localtime(<span class="built_in">time</span>.<span class="built_in">time</span>())) + <span class="string">" Countdown "</span> + str(<span class="number">30</span>-i)</span><br><span class="line">                <span class="built_in">time</span>.sleep(<span class="number">1</span>)</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">'CommentResult.txt'</span>):</span><br><span class="line">            os.remove(<span class="string">'CommentResult.txt'</span>)</span><br><span class="line">        </span><br><span class="line">        commentid_object = <span class="built_in">open</span>(<span class="string">'CommentID_process.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">        commentresult_object=<span class="built_in">open</span>(<span class="string">'CommentResult.txt'</span>,<span class="string">'w+'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> commentid_object:</span><br><span class="line">                <span class="keyword">if</span> comment_update(<span class="built_in">line</span>) == <span class="number">0</span>:</span><br><span class="line">                    print <span class="built_in">time</span>.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,<span class="built_in">time</span>.localtime(<span class="built_in">time</span>.<span class="built_in">time</span>())) +<span class="string">" "</span>+ <span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">"\n"</span>,<span class="string">""</span>)+<span class="string">" processed successfully"</span></span><br><span class="line">                    commentresult_object.<span class="built_in">write</span>(<span class="built_in">time</span>.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,<span class="built_in">time</span>.localtime(<span class="built_in">time</span>.<span class="built_in">time</span>())) +<span class="string">" "</span>+ <span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">"\n"</span>,<span class="string">""</span>)+<span class="string">" processed successfully \n"</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print <span class="built_in">time</span>.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,<span class="built_in">time</span>.localtime(<span class="built_in">time</span>.<span class="built_in">time</span>())) +<span class="string">" "</span>+ <span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">"\n"</span>,<span class="string">""</span>)+<span class="string">" processed failed"</span></span><br><span class="line">                    commentresult_object.<span class="built_in">write</span>(<span class="built_in">time</span>.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,<span class="built_in">time</span>.localtime(<span class="built_in">time</span>.<span class="built_in">time</span>())) +<span class="string">" "</span>+ <span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">"\n"</span>,<span class="string">""</span>)+<span class="string">" processed failed \n"</span>)   </span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            commentid_object.<span class="built_in">close</span>()</span><br><span class="line">            commentresult_object.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">            os.<span class="built_in">rename</span>(<span class="string">'CommentID_process.txt'</span>,<span class="string">'CommentID_'</span>+<span class="built_in">time</span>.strftime(<span class="string">'%Y%m%d%H%M%S'</span>,<span class="built_in">time</span>.localtime(<span class="built_in">time</span>.<span class="built_in">time</span>()))+<span class="string">'.txt'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS安装vsftpd</title>
      <link href="/2018/11/07/CentOS%E5%AE%89%E8%A3%85vsftpd/"/>
      <url>/2018/11/07/CentOS%E5%AE%89%E8%A3%85vsftpd/</url>
      
        <content type="html"><![CDATA[<p>vsftpd 是 Linux 下知名的 FTP 服务器，可作为搭建 FTP 服务器的首选。</p><h3 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h3><p>查看是否已经安装vsftpd：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> vsftpd</span><br></pre></td></tr></table></figure><p>如果没有，就安装，并设置开机启动：</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">yum -y install vsftpd</span><br><span class="line">chkconfig vsftpd <span class="keyword">on</span></span><br></pre></td></tr></table></figure><h3 id="虚拟用户配置"><a href="#虚拟用户配置" class="headerlink" title="虚拟用户配置"></a>虚拟用户配置</h3><p>虚拟用户是没有使用真实的帐户，只是通过映射到真实帐户和设置权限的目的，不能登录操作系统。</p><p>修改配置文件，打开/etc/vsftpd/vsftpd.conf，做如下配置：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span> //设定不允许匿名访问</span><br><span class="line"><span class="attr">local_enable</span>=<span class="literal">YES</span> //设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为<span class="literal">NO</span>的情况下所有虚拟用户将无法访问</span><br><span class="line"><span class="attr">chroot_list_enable</span>=<span class="literal">YES</span> //用户不能离开主目录</span><br><span class="line"><span class="comment">#ascii_upload_enable=YES（不建议使用 2018_01_22）</span></span><br><span class="line"><span class="comment">#ascii_download_enable=YES //设定支持ASCII模式的上传和下载功能（不建议使用 2018_01_22）</span></span><br><span class="line"><span class="attr">pam_service_name</span>=vsftpd //PAM认证文件名。PAM将根据/etc/pam.d/vsftpd进行认证</span><br></pre></td></tr></table></figure><p>以下这些是关于 vsftpd 虚拟用户支持的重要配置项，默认 vsftpd.conf 中不包含这些设定项目，需要自己手动添加。</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">guest_enable=YES //设定启用虚拟用户功能</span><br><span class="line">guest_username=ftp //指定虚拟用户的宿主用户，CentOS中已经有内置的ftp用户了</span><br><span class="line">user_config_dir=/etc/vsftpd/vuser_conf //设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名</span><br><span class="line">进行认证</span><br></pre></td></tr></table></figure><p>安装 Berkeley DB 工具，找不到 db_load 的问题就是没有安装这个包。</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> db4 db4-utils</span><br></pre></td></tr></table></figure><p>创建用户密码文本/etc/vsftpd/vuser_passwd.txt ，注意奇行是用户名，偶行是密码。</p><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">test</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>生成虚拟用户认证的db文件：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">db_load -T -t hash -f <span class="regexp">/etc/</span>vsftpd<span class="regexp">/vuser_passwd.txt /</span>etc<span class="regexp">/vsftpd/</span>vuser_passwd.db</span><br></pre></td></tr></table></figure><p>编辑认证文件/etc/pam.d/vsftpd，全部注释掉原来语句，再增加以下两句：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">auth required pam_userdb.so <span class="attribute">db</span>=/etc/vsftpd/vuser_passwd</span><br><span class="line">account required pam_userdb.so <span class="attribute">db</span>=/etc/vsftpd/vuser_passwd</span><br></pre></td></tr></table></figure><p>创建虚拟用户配置文件</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/etc/</span>vsftpd<span class="regexp">/vuser_conf/</span></span><br><span class="line">vi <span class="regexp">/etc/</span>vsftpd<span class="regexp">/vuser_conf/</span>test <span class="regexp">//</span>文件名等于vuser_passwd.txt里面的账户名，否则下面设置无效</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_root</span>=/ftp/www //虚拟用户根目录,根据实际情况修改</span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span> //可写</span><br><span class="line"><span class="attr">anon_umask</span>=<span class="number">022</span> //掩码</span><br><span class="line"><span class="attr">anon_world_readable_only</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">anon_upload_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_mkdir_write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_other_write_enable</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure><p>设置Selinux</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">setsebool -P ftp_home_dir=<span class="number">1</span> <span class="comment">//设置ftp可以使用home目录</span></span><br><span class="line">setsebool -P allow_ftpd_full_access=<span class="number">1</span> <span class="comment">//设置ftp用户可以有所有权限</span></span><br></pre></td></tr></table></figure><p>设置FTP根目录权限</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mkdir <span class="string">/ftp/www</span> <span class="string">//</span>创建目录</span><br><span class="line">chmod R 755 <span class="string">/ftp</span></span><br><span class="line">chmod R 777 <span class="string">/ftp/www</span></span><br></pre></td></tr></table></figure><p>最新的vsftpd要求对主目录不能有写的权限所以ftp为755，主目录下面的子目录再设置777权限。</p><p>设置防火墙，打开/etc/sysconfig/iptables：</p><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">-A INPUT –m <span class="keyword">state</span> --state NEW –m tcp –p –dport <span class="number">22</span> –j ACCEPT</span><br><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p -dport <span class="number">21</span> -j ACCEPT</span><br></pre></td></tr></table></figure><p>然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service iptables restart</span></span><br></pre></td></tr></table></figure><p>启动 FTP 服务器 </p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service vsftpd <span class="literal">start</span></span><br></pre></td></tr></table></figure><p>配置PASV模式</p><p>vsftpd默认没有开启PASV模式，现在FTP只能通过PORT模式连接，要开启PASV默认需要通过下面的配置</p><p>打开/etc/vsftpd/vsftpd.conf，在末尾添加</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">pasv_enable</span>=<span class="literal">YES</span> //开启PASV模式</span><br><span class="line"><span class="attr">pasv_min_port</span>=<span class="number">40000</span> //最小端口号</span><br><span class="line"><span class="attr">pasv_max_port</span>=<span class="number">40080</span> //最大端口号</span><br><span class="line"><span class="attr">pasv_promiscuous</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure><p>在防火墙配置内开启40000到40080端口</p><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p -dport <span class="number">40000</span>:<span class="number">40080</span> -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启 iptabls 和 vsftpd</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure><h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h3><p>CentOS 7 中默认使用 Firewalld 做防火墙，所以修改 iptables 后，在重启系统后，根本不管用。</p><p>Firewalld中添加端口方法如下：</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zone=public</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=3306/tcp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">permanent</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">reload</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>vsftp可支持多个虚拟账户配置，不同的账户对不同目录拥有不同权限。</p><p>vsftp对于所有者为宿主FTP用户的文件夹，才能拥有完整的权限。</p><p>对于同一用户下的不同目录，可通过服务器真实文件夹权限控制，实现FTP文件夹权限控制。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vsftpd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>北京，北京</title>
      <link href="/2018/11/07/%E5%8C%97%E4%BA%AC%EF%BC%8C%E5%8C%97%E4%BA%AC/"/>
      <url>/2018/11/07/%E5%8C%97%E4%BA%AC%EF%BC%8C%E5%8C%97%E4%BA%AC/</url>
      
        <content type="html"><![CDATA[<p>2015年3月22日</p><p>北京市经济技术开发区亦庄朝林广场A座</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Redis高可用双机部署</title>
      <link href="/2018/11/07/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E5%8F%8C%E6%9C%BA%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/11/07/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E5%8F%8C%E6%9C%BA%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2014</span> 年。</span><br><span class="line">当时 Redis 官方高可用方案 Redis Sentine，处于 <span class="keyword">beta </span>阶段。</span><br></pre></td></tr></table></figure><p>在传统的非云化的IT环境中，Redis 高可用主要使用 Keepalived 搭建，Keepalived 向 Redis 客户端提供 VIP，监控主备机工作状态，VIP 自动漂移，实现容灾切换。</p><p>在商业公有云环境中，用户购买虚拟机，云平台会自动分配内网 IP，网络管理完全由平台控制，普通用户无法自由配置 IP 地址，VIP 作为 Keepalived 方案中重要的条件，在商业公有云中无法满足。</p><p>在阿里云、腾讯云搭建环境中，我们就碰到上面的问题。</p><p>解决方案是，利用 shell 脚本实现 Keepalived 的功能。</p><p>架构图：</p><p><img src="/images/Redis高可用双机部署1.jpg" alt=""></p><p>工作流程：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用启动脚本启动 Redis 主机；</span><br><span class="line"><span class="number">2.</span>使用启动脚本启动 Redis 备机，向当前主机同步；</span><br><span class="line"><span class="number">3.</span>Hyperic 定时调用 Redis 检查脚本判断主备机状态；</span><br><span class="line"><span class="number">4.</span>主机异常时，Redis 备机自动切换为主机，触发告警；</span><br><span class="line"><span class="number">5.</span>主机恢复时，使用启动脚本重新启动主机，向当前主机(原备机)同步，同步完成后，再切换为主机；</span><br><span class="line"><span class="number">6.</span>备机异常时，触发告警；</span><br><span class="line"><span class="number">7.</span>备机恢复时，使用启动脚本重新启动备机，向当前主机同步；</span><br></pre></td></tr></table></figure><p>实现原理：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.SLB</span> 负载两台 Ha 服务器</span><br><span class="line">SLB 为何不直接负载两台 Redis 服务器？</span><br><span class="line">Redis 双机具备主从关系，一般 SLB 服务负载均衡策略较为简单，仅支持轮询或最小连接数策略，不支持主备模式，无法满足 Redis 双机负载均衡要求。</span><br><span class="line"><span class="number">2</span><span class="selector-class">.Ha</span> 服务器负载两台Redis服务器</span><br><span class="line">Ha 服务器运行开源负载均衡组件 Haproxy，通过配置文件可实现灵活的负载均衡策略，</span><br><span class="line">针对 Redis 服务，使用主备模式。</span><br></pre></td></tr></table></figure><p>具体配置：</p><p>1.SLB，轮询模式，前端服务端口 6379，后端转发端口 6379，开启会话保持；</p><p>2.Haproxy,主备模式，前端服务端口 6379，后端转发端口 6379，监控端口 16379；</p><p>在 Redis 本地存在大量持久化数据的情况下，重新启动时，数据加载的时间耗时较长，在这个过程中，无法正常对外提供服务。</p><p>如果使用 Redis 服务端口 6379 作为监控端口，当组件启动时，Ha 会认为 Redis 可正常提供服务，实际上，只有组件启动且数据全部加载完成，才能正常对外提供服务，数据加载时间同数据量正相关，无法准确估计，所以监控端口使用 16379，当数据加载完成时，由脚本控制，实现对该端口的监听。</p><p>Haproxy 配置</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">listen  redis</span><br><span class="line">bind 0.0.0.0:6379</span><br><span class="line">mode tcp</span><br><span class="line">balance roundrobin</span><br><span class="line">server  redis1 10.161.58.215:6379 weight 1 maxconn 10240 check<span class="built_in"> port </span>16379 check inter 10s</span><br><span class="line">server  redis2 10.161.69.45:6379 weight 1 maxconn 10240 check<span class="built_in"> port </span>16379 check inter 10s backup</span><br></pre></td></tr></table></figure><p>3.Redis，主备机角色预置</p><p>主机<br><img src="/images/Redis高可用双机部署2.jpg" alt=""></p><p>备机</p><p><img src="/images/Redis高可用双机部署3.jpg" alt=""></p><p>主机启动脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断redis进程是否存在，若进程不存在，则启动redis进程</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $( pgrep -f <span class="string">"redis-server"</span> | wc -l ) -eq 0</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"redis 进程不存在,开始启动进程"</span></span><br><span class="line"></span><br><span class="line">    /usr/<span class="built_in">local</span>/redis/src/redis-server /etc/redis.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"redis启动命令执行完成"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"redis进程已存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断redis是否启动成功并预热完成</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$i</span>"</span> -lt 60 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  ALIVE=`/usr/<span class="built_in">local</span>/redis/src/redis-cli ping`</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$ALIVE</span>"</span> == <span class="string">"PONG"</span> ];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"redis启动和预热状态检查，进度:<span class="variable">$i</span>/60"</span></span><br><span class="line">       i=`expr <span class="variable">$i</span> + 1`</span><br><span class="line">       sleep 1</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> “redis启动失败,请检查...”</span><br><span class="line">        sleep 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断slave状态，如果slave为启动状态，则master开始从slvae同步</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $( nc -w 0 10.161.69.45 6379 &amp;&amp; <span class="built_in">echo</span> 0 || <span class="built_in">echo</span> 1 ) -eq 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"slave当前是启动状态"</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"master开始从slave开始同步"</span></span><br><span class="line"></span><br><span class="line">   SYNC=`/usr/<span class="built_in">local</span>/redis/src/redis-cli SLAVEOF 10.161.69.45 6379`</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> [ <span class="string">"<span class="variable">$SYNC</span>"</span> == <span class="string">"OK"</span> ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"master向slave发送同步指令成功"</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$SYNC</span>"</span> == <span class="string">"OK Already connected to specified master"</span> ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"master同slave已经是同步状态"</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"master向slave发送同步指令失败"</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$SYNC</span>"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"slave当前不是启动状态"</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"master无需同步"</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"shell进程退出"</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#启动监听端口</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"启动监听端口"</span></span><br><span class="line">   nohup ./port_redis.sh  &gt; /dev/null &amp;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#master从slave同步，判断同步的进度，当同步状态为up时，进行下一步</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$SYNCTAG</span>"</span> != <span class="string">"1"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  SYNCINFO=`/usr/<span class="built_in">local</span>/redis/src/redis-cli info`</span><br><span class="line">  SYNCTAG=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$SYNCINFO</span>"</span>|grep <span class="string">"master_link_status:up"</span>|wc -l`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"master从slave同步成功"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mster从slave同步成功，mater切换状态</span></span><br><span class="line">MASTER=`/usr/<span class="built_in">local</span>/redis/src/redis-cli SLAVEOF NO ONE`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$MASTER</span>"</span> == <span class="string">"OK"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#启动监听端口</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"启动监听端口"</span></span><br><span class="line">   nohup ./port_redis.sh  &gt; /dev/null &amp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>主机检查脚本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查自身服务状态</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $( nc -w 0 127.0.0.1 6379 &amp;&amp; <span class="built_in">echo</span> 0 || <span class="built_in">echo</span> 1 ) -eq 0</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">#master检查自身正常</span></span><br><span class="line">   <span class="built_in">echo</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#master服务异常，slave不再向其同步</span></span><br><span class="line">   /usr/<span class="built_in">local</span>/redis/src/redis-cli -h 10.161.69.45 -p 6379 SLAVEOF NO ONE &gt; /dev/null</span><br><span class="line">   <span class="comment">#关闭监听端口</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">test</span> $( pgrep -f <span class="string">"port_redis"</span> | wc -l ) -eq 1</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">kill</span> -9 `ps -ef|grep <span class="string">"port_redis"</span>|grep -v <span class="string">"grep"</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">test</span> $( pgrep -f <span class="string">"nc -l 16379"</span> | wc -l ) -eq 1</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">kill</span> -9 `ps -ef|grep <span class="string">"nc -l 16379"</span>|grep -v <span class="string">"grep"</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>备机启动脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断redis进程是否存在，若进程不存在，则启动redis进程</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $( pgrep -f <span class="string">"redis-server"</span> | wc -l ) -eq 0</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"redis 进程不存在,开始启动进程"</span></span><br><span class="line"></span><br><span class="line">    /usr/<span class="built_in">local</span>/redis/src/redis-server /etc/redis.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"redis启动命令执行完成"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"redis进程已存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断redis是否启动成功并预热完成</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$i</span>"</span> -lt 60 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  ALIVE=`/usr/<span class="built_in">local</span>/redis/src/redis-cli ping`</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$ALIVE</span>"</span> == <span class="string">"PONG"</span> ];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"redis启动和预热状态检查，进度:<span class="variable">$i</span>/60"</span></span><br><span class="line">       i=`expr <span class="variable">$i</span> + 1`</span><br><span class="line">       sleep 1</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> “redis启动失败,请检查...”</span><br><span class="line">        sleep 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断master状态，如果master为启动状态，则slave开始从master同步</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $( nc -w 0 10.161.58.215 6379 &amp;&amp; <span class="built_in">echo</span> 0 || <span class="built_in">echo</span> 1 ) -eq 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"master当前是启动状态"</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"slave开始从master开始同步"</span></span><br><span class="line"></span><br><span class="line">   SYNC=`/usr/<span class="built_in">local</span>/redis/src/redis-cli SLAVEOF 10.161.58.215 6379`</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> [ <span class="string">"<span class="variable">$SYNC</span>"</span> == <span class="string">"OK"</span> ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"slave向master发送同步指令成功"</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$SYNC</span>"</span> == <span class="string">"OK Already connected to specified master"</span> ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"slave同master已经是同步状态"</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"slave向master发送同步指令失败"</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$SYNC</span>"</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"master当前不是启动状态"</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"slave无需同步"</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"shell进程退出"</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#启动监听端口</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"启动监听端口"</span></span><br><span class="line">   nohup ./port_redis.sh &gt; /dev/null &amp;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#slave从master同步，判断同步的进度，当同步状态为up时，进行下一步</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$SYNCTAG</span>"</span> != <span class="string">"1"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  SYNCINFO=`/usr/<span class="built_in">local</span>/redis/src/redis-cli info`</span><br><span class="line">  SYNCTAG=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$SYNCINFO</span>"</span>|grep <span class="string">"master_link_status:up"</span>|wc -l`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"slave从master同步成功"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动监听端口</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"启动监听端口"</span></span><br><span class="line">nohup ./port_redis.sh  &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure><p>备机检查脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">MASTERTAG=`nc -w 0 10.161.58.215 6379 &amp;&amp; <span class="built_in">echo</span> 0 || <span class="built_in">echo</span> 1`</span><br><span class="line">SLAVETAG=`nc -w 0 127.0.0.1 6379 &amp;&amp; <span class="built_in">echo</span> 0 || <span class="built_in">echo</span> 1`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查自身服务状态</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$MASTERTAG</span> -eq 0 ] &amp;&amp; [ <span class="variable">$SLAVETAG</span> -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#master和Slave测试正常</span></span><br><span class="line">    <span class="built_in">echo</span> 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$MASTERTAG</span> -eq 1 ] &amp;&amp; [ <span class="variable">$SLAVETAG</span> -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#master服务异常，slave不再向其同步</span></span><br><span class="line">   /usr/<span class="built_in">local</span>/redis/src/redis-cli -h 127.0.0.1 -p 6379 SLAVEOF NO ONE &gt; /dev/null</span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> 0</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$MASTERTAG</span> -eq 0 ] &amp;&amp; [ <span class="variable">$SLAVETAG</span> -eq 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">test</span> $( pgrep -f <span class="string">"port_redis"</span> | wc -l ) -eq 1</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">kill</span> -9 `ps -ef|grep <span class="string">"port_redis"</span>|grep -v <span class="string">"grep"</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">test</span> $( pgrep -f <span class="string">"nc -l 16379"</span> | wc -l ) -eq 1</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">kill</span> -9 `ps -ef|grep <span class="string">"nc -l 16379"</span>|grep -v <span class="string">"grep"</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">test</span> $( pgrep -f <span class="string">"port_redis"</span> | wc -l ) -eq 1</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">kill</span> -9 `ps -ef|grep <span class="string">"port_redis"</span>|grep -v <span class="string">"grep"</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">test</span> $( pgrep -f <span class="string">"nc -l 16379"</span> | wc -l ) -eq 1</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">kill</span> -9 `ps -ef|grep <span class="string">"nc -l 16379"</span>|grep -v <span class="string">"grep"</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> 1 </span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>监控端口启动脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> [ 1 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> $( nc -w 0 127.0.0.1 16379 &amp;&amp; <span class="built_in">echo</span> 0 || <span class="built_in">echo</span> 1 ) -eq 0</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">exit</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      nc -l 16379</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos修改用户进程限制参数</title>
      <link href="/2018/11/07/Centos%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B%E9%99%90%E5%88%B6%E5%8F%82%E6%95%B0/"/>
      <url>/2018/11/07/Centos%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B%E9%99%90%E5%88%B6%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="验证方法"><a href="#验证方法" class="headerlink" title="验证方法"></a>验证方法</h2><p>使用非root账户，运行如下python脚本：</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">########################################################################</span><br><span class="line"><span class="keyword">class</span> TestThread(threading.Thread):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="string">""</span><span class="string">"Constructor"</span><span class="string">""</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while <span class="literal">True</span>:</span><br><span class="line">            print <span class="string">'haha'</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count = <span class="number">1000</span></span><br><span class="line">    for i <span class="keyword">in</span> range(count):</span><br><span class="line">        athread = TestThread()</span><br><span class="line">        athread.start()</span><br></pre></td></tr></table></figure><p>当count接近1024时，运行时出现无法创建thread的提示。</p><p>使用root账户执行，无相同报错。</p><p>非root账户执行ulimit -a</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">ulimit -a</span><br><span class="line">core file size          (<span class="name">blocks</span>, -c) <span class="number">0</span></span><br><span class="line">data seg size           (<span class="name">kbytes</span>, -d) unlimited</span><br><span class="line">scheduling priority             (<span class="name">-e</span>) <span class="number">0</span></span><br><span class="line">file size               (<span class="name">blocks</span>, -f) unlimited</span><br><span class="line">pending signals                 (<span class="name">-i</span>) <span class="number">62820</span></span><br><span class="line">max locked memory       (<span class="name">kbytes</span>, -l) <span class="number">64</span></span><br><span class="line">max memory size         (<span class="name">kbytes</span>, -m) unlimited</span><br><span class="line">open files                      (<span class="name">-n</span>) <span class="number">1024</span></span><br><span class="line">pipe size            (<span class="number">512</span> bytes, -p) <span class="number">8</span></span><br><span class="line">POSIX message queues     (<span class="name">bytes</span>, -q) <span class="number">819200</span></span><br><span class="line">real-time priority              (<span class="name">-r</span>) <span class="number">0</span></span><br><span class="line">stack size              (<span class="name">kbytes</span>, -s) <span class="number">10240</span></span><br><span class="line">cpu time               (<span class="name">seconds</span>, -t) unlimited</span><br><span class="line">max user processes              (<span class="name">-u</span>) <span class="number">1024</span></span><br><span class="line">virtual memory          (<span class="name">kbytes</span>, -v) unlimited</span><br><span class="line">file locks                      (<span class="name">-x</span>) unlimited</span><br></pre></td></tr></table></figure><p>max user processes参数配置为1024。</p><p>此项配置会限制最大用户进程为1024，而root用户则没有此限制。</p><p>使用root用户执行的结果如下：</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">ulimit -a</span><br><span class="line">core file size          (<span class="name">blocks</span>, -c) <span class="number">0</span></span><br><span class="line">data seg size           (<span class="name">kbytes</span>, -d) unlimited</span><br><span class="line">scheduling priority             (<span class="name">-e</span>) <span class="number">0</span></span><br><span class="line">file size               (<span class="name">blocks</span>, -f) unlimited</span><br><span class="line">pending signals                 (<span class="name">-i</span>) <span class="number">62820</span></span><br><span class="line">max locked memory       (<span class="name">kbytes</span>, -l) <span class="number">64</span></span><br><span class="line">max memory size         (<span class="name">kbytes</span>, -m) unlimited</span><br><span class="line">open files                      (<span class="name">-n</span>) <span class="number">1024</span></span><br><span class="line">pipe size            (<span class="number">512</span> bytes, -p) <span class="number">8</span></span><br><span class="line">POSIX message queues     (<span class="name">bytes</span>, -q) <span class="number">819200</span></span><br><span class="line">real-time priority              (<span class="name">-r</span>) <span class="number">0</span></span><br><span class="line">stack size              (<span class="name">kbytes</span>, -s) <span class="number">10240</span></span><br><span class="line">cpu time               (<span class="name">seconds</span>, -t) unlimited</span><br><span class="line">max user processes              (<span class="name">-u</span>) <span class="number">62820</span></span><br><span class="line">virtual memory          (<span class="name">kbytes</span>, -v) unlimited</span><br><span class="line">file locks                      (<span class="name">-x</span>) unlimited</span><br></pre></td></tr></table></figure><p>此处max user processes设置为62820</p><h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><h3 id="CentOS-6-x"><a href="#CentOS-6-x" class="headerlink" title="CentOS 6.x"></a>CentOS 6.x</h3><p>使用root用户修改配置文件</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.d/<span class="number">90</span>-nproc.conf</span><br><span class="line"></span><br><span class="line"><span class="meta"># Default limit for number of user's processes to prevent</span></span><br><span class="line"><span class="meta"># accidental fork bombs.</span></span><br><span class="line"><span class="meta"># See rhbz #432903 for reasoning.</span></span><br><span class="line"></span><br><span class="line">*          soft    nproc     <span class="number">1024</span></span><br><span class="line">admin       soft    nproc     <span class="number">10240</span></span><br><span class="line">root       soft    nproc     unlimited</span><br></pre></td></tr></table></figure><p>针对使用的admin用户增加配置</p><h3 id="CentOS-7-x"><a href="#CentOS-7-x" class="headerlink" title="CentOS 7.x"></a>CentOS 7.x</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>security<span class="regexp">/limits.d/</span><span class="number">20</span>-nproc.conf</span><br></pre></td></tr></table></figure><p>再次运行上述python脚本，count参数配置为10000运行正常。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>运维堡垒机文章汇总</title>
      <link href="/2018/11/07/%E8%BF%90%E7%BB%B4%E5%A0%A1%E5%9E%92%E6%9C%BA%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/"/>
      <url>/2018/11/07/%E8%BF%90%E7%BB%B4%E5%A0%A1%E5%9E%92%E6%9C%BA%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文<span class="number">2015</span>年写的关于堡垒机文章的汇总。</span><br></pre></td></tr></table></figure><h2 id="堡垒机方案选型"><a href="#堡垒机方案选型" class="headerlink" title="堡垒机方案选型"></a>堡垒机方案选型</h2><h3 id="原始需求"><a href="#原始需求" class="headerlink" title="原始需求"></a>原始需求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户通过跳板机，访问目标服务器；</span><br><span class="line">用户在跳板机上的行为和权限受限；</span><br><span class="line">用户在目标服务器上的行为和权限受限；</span><br><span class="line">用户在目标服务器上的操作被记录，方便后续回溯；</span><br></pre></td></tr></table></figure><h3 id="选型思路"><a href="#选型思路" class="headerlink" title="选型思路"></a>选型思路</h3><h4 id="用户入口"><a href="#用户入口" class="headerlink" title="用户入口"></a>用户入口</h4><p>WebShell或传统SSH客户端？</p><p>WebShell解决方案——<a href="https://github.com/liftoff/GateOne" target="_blank" rel="noopener">gateone</a>。</p><p>在服务器上安装WebShell，用户登录后，访问相应账户。</p><p>优点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装方便；</span><br><span class="line">HTML5实现，无需安装插件，支持主流浏览器；</span><br><span class="line">支持日志回放；</span><br></pre></td></tr></table></figure><p>缺点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器访问WebShell体验不好，快捷键失灵，容易误操作，效率低下；</span><br><span class="line">日志回放采用录屏的方式，不方便做二次处理；</span><br></pre></td></tr></table></figure><p>总结</p><p>实现基本功能，要进一步使用，需要做二次开发。</p><p>综合体验不佳，排除WebShell方案，还是采用传统ssh客户端方式。</p><h4 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h4><p>用户权限如何限制？</p><p>用户访问跳板机，使用普通账户，仅具备只读权限？存在严重的安全问题。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户可绕过跳板机；</span><br><span class="line">系统的实现代码，可能会泄露；</span><br><span class="line">用户操作日志，可能会人为删除；</span><br></pre></td></tr></table></figure><p>用户访问跳板机，使用普通账户，用户被封闭在jail环境中？符合要求。</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">仅具备基础的<span class="keyword">bash环境；</span></span><br><span class="line"><span class="keyword">仅能执行管理员许可的命令；</span></span><br><span class="line"><span class="keyword">运行环境可支持灵活配置；</span></span><br></pre></td></tr></table></figure><p>跳板机访问目标服务器，使用普通账户，仅具备只读权限？符合要求。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标服务器不宜做大规模配置变更；</span><br><span class="line">用户需要具备大部分文件的只读权限；</span><br></pre></td></tr></table></figure><p>综合：用户访问跳板机，权限高度受限，通过跳板机访问目标服务器，使用普通账户权限。</p><h4 id="登录目标服务器"><a href="#登录目标服务器" class="headerlink" title="登录目标服务器"></a>登录目标服务器</h4><p>跳板机登录目标服务器方案？</p><p>采用密码鉴权的方式？不符合要求。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">密码需要配置在登录脚本中，拥有脚本执行权限的用户，可获得密码，绕过跳板机；</span><br><span class="line">密码鉴权采用自动化脚本登录，有两种方式，<span class="keyword">expect</span>、sshpas；</span><br></pre></td></tr></table></figure><p>这两种方式，均依赖于pty(虚拟终端)，在jail环境中，无法支持pty。</p><p>不使用密码鉴权的方式？符合要求。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">没有透明密码，采用密钥鉴权方式，仅在跳板机上生效；</span><br><span class="line">不依赖pty，支持jail环境；</span><br></pre></td></tr></table></figure><p>综合：不使用密码鉴权，采用密钥方式鉴权</p><h4 id="用户行为记录"><a href="#用户行为记录" class="headerlink" title="用户行为记录"></a>用户行为记录</h4><p>用户行为记录：tee或script？</p><p>tee可将标准输出写入到文件中，没有时间轴，直接读取文本回放。</p><p>script类似于录屏软件，记录时间轴和用户信息，采用scriptreplay命令回放。</p><p>考虑到记录回溯，采用纯文本的方式回溯，方便工具二次处理，选择tee。</p><p>还有其他选择？</p><p>解析history文件，没有时间轴，只有输入，没有输出，放弃。</p><p>《python自动化运维》中提到一种方案，在所有目标服务器上部署客户端，监控用户行为，主动向服务端上报，</p><p>此方案实现较为复杂，同时对现网架构改动较大，放弃。</p><h4 id="底层逻辑"><a href="#底层逻辑" class="headerlink" title="底层逻辑"></a>底层逻辑</h4><p>底层逻辑实现方式：shell或python？</p><p>Linux原生支持shell和python两种语言，其中shell更为基础。</p><p>采用shell语言？不符合要求。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码实现效率低下；</span><br><span class="line">代码可读性略差；</span><br><span class="line">变量类型不够丰富；</span><br><span class="line">基础类库无法扩展；</span><br></pre></td></tr></table></figure><p>采用python语言？符合要求。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编程效率更好；</span><br><span class="line">代码可读性更换；</span><br><span class="line">变量类型丰富；</span><br><span class="line">支持类库扩展；</span><br></pre></td></tr></table></figure><p>综合：底层部分功能若Linux已经实现，直接调用，大部分的业务逻辑代码，使用python。</p><h2 id="使用jailkit搭建权限受限账户"><a href="#使用jailkit搭建权限受限账户" class="headerlink" title="使用jailkit搭建权限受限账户"></a>使用jailkit搭建权限受限账户</h2><p>操作系统版本：CentOS 6.5</p><p>jailkit版本：2.17</p><h3 id="设计需求"><a href="#设计需求" class="headerlink" title="设计需求"></a>设计需求</h3><p>搭建账户受限账户，用户访问目录受限，可执行命令受限</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>安装jailkit</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">从官网 http:<span class="comment">//olivier.sessink.nl/jailkit/ 下载安装包</span></span><br><span class="line">tar -zxvf jailkit-<span class="number">2.17</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">cd jailkit-<span class="number">2.17</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="配置jail"><a href="#配置jail" class="headerlink" title="配置jail"></a>配置jail</h3><p>使用root账户，新建目录/opt/jail</p><p>初始化jial目录，安装lsh环境</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">jk_init</span> -v -j /<span class="meta">opt</span>/jail/ jk_lsh</span><br></pre></td></tr></table></figure><p>安装ssh环境</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">jk_init</span> -v -j /<span class="meta">opt</span>/jail/ ssh</span><br></pre></td></tr></table></figure><p>安装python</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">jk_init -v -<span class="keyword">j</span> /<span class="keyword">opt</span>/jail/ <span class="keyword">python</span></span><br></pre></td></tr></table></figure><p>默认配置中没有python的初始化配置，检查系统中python目录，增加配置</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">vim /etc/jailkit/jk_init.ini</span><br><span class="line"></span><br><span class="line">comment = the python interpreter <span class="keyword">and</span> libraries</span><br><span class="line">paths = <span class="regexp">/usr/bin</span><span class="regexp">/python, /usr</span><span class="regexp">/bin/python</span>2.<span class="number">6</span>, <span class="regexp">/usr/lib</span><span class="regexp">/python2.6, /usr</span><span class="regexp">/lib64/python</span>2.<span class="number">6</span>, <span class="regexp">/usr/include</span><span class="regexp">/python2.6</span></span><br></pre></td></tr></table></figure><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">useradd</span> ktvworker</span><br><span class="line">修改密码</span><br><span class="line"><span class="symbol">passwd</span> ktvworker</span><br><span class="line">切换用户，生成密钥对</span><br><span class="line"><span class="symbol">su</span> ktvworker</span><br><span class="line"><span class="symbol">ssh</span>-keygen -t rsa</span><br><span class="line">将用户迁移至jail环境</span><br><span class="line"><span class="symbol">jk_jailuser</span> -m -v -j /<span class="meta">opt</span>/jail/ ktvworker</span><br></pre></td></tr></table></figure><h3 id="配置bash环境"><a href="#配置bash环境" class="headerlink" title="配置bash环境"></a>配置bash环境</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">为实现跳板机用户远程访问</span><br><span class="line">jk_cp -v -j <span class="meta-keyword">/opt/</span>jail/ <span class="meta-keyword">/bin/</span>bash</span><br><span class="line">修改jail环境中passwd配置</span><br><span class="line">vim <span class="meta-keyword">/opt/</span>jail<span class="meta-keyword">/etc/</span>passwd</span><br><span class="line">将用户的shell程序由<span class="meta-keyword">/usr/</span>sbin/jk_lsh修改为<span class="meta-keyword">/bin/</span>bash</span><br></pre></td></tr></table></figure><h3 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h3><p>现已经得到一个仅支持基础bash命令，同时支持python环境的jail环境。</p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>jk_init用于读取配置文件，初始化jail运行环境。</p><p>jk_cp用户复制当个文件，会自动关联系统库文件。</p><p>为避免跳板机被占用，设置空闲10分钟自动退出</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="attribute">TMOUT</span>=600</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="使用jailkit搭建运维跳板机"><a href="#使用jailkit搭建运维跳板机" class="headerlink" title="使用jailkit搭建运维跳板机"></a>使用jailkit搭建运维跳板机</h2><h3 id="设计需求-1"><a href="#设计需求-1" class="headerlink" title="设计需求"></a>设计需求</h3><p>用户通过访问权限受限跳板机，采用免鉴权的方式，访问目标服务器，操作日志可追踪。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>前提是jail环境已经配置完成。</p><h4 id="跳板机相关配置"><a href="#跳板机相关配置" class="headerlink" title="跳板机相关配置"></a>跳板机相关配置</h4><p>使用tee跟踪操作日志，复制tee文件至jail环境。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">jk_cp -v -j <span class="regexp">/opt/</span>jail<span class="regexp">/ /u</span>sr<span class="regexp">/bin/</span>tee</span><br></pre></td></tr></table></figure><p>在ktv家目录新建serverlist文件，维护服务器名称和IP地址对应关系。</p><p>新建init文件，向用户提示使用方法，修改ktv的.bashrc文件，增加.init。</p><p>里面saltstack批量删除服务器上密钥。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">salt -N <span class="string">'ktv'</span> <span class="keyword">cmd</span>.<span class="bash">run <span class="string">"rm -rf /home/ktvworker/.ssh/authorized_keys"</span></span></span><br></pre></td></tr></table></figure><p>利用python脚本调用ssh-copy-id命令，向目标服务器分发key文件。</p><h4 id="ssh命令替换"><a href="#ssh命令替换" class="headerlink" title="ssh命令替换"></a>ssh命令替换</h4><p>将系统的ssh命令更名，将更名后的ssh文件配置在python脚本中。</p><p>在使用新建名为ssh的shell脚本，放在环境变量指定的目录。</p><p>实现用户仅能访问指定的ssh命令，同时行为受到约束。</p><p>参考<a href="http://olivier.sessink.nl/jailkit/howtos_ssh_only.html" target="_blank" rel="noopener">官网资料</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 堡垒机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS限制sftp用户访问目录</title>
      <link href="/2018/11/06/CentOS%E9%99%90%E5%88%B6sftp%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E7%9B%AE%E5%BD%95/"/>
      <url>/2018/11/06/CentOS%E9%99%90%E5%88%B6sftp%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2015</span>年。</span><br><span class="line">sftp依赖ssh，是最常用的文件传输方法。</span><br></pre></td></tr></table></figure><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">useradd sftpuser</span></span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">passwd sftpuser</span></span><br></pre></td></tr></table></figure><h3 id="关闭SSH登录"><a href="#关闭SSH登录" class="headerlink" title="关闭SSH登录"></a>关闭SSH登录</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">vim /etc/passwd</span><br><span class="line">修改sftpuser账户的<span class="keyword">shell</span><span class="bash">为/bin/<span class="literal">false</span></span></span><br></pre></td></tr></table></figure><h3 id="修改SSH配置文件"><a href="#修改SSH配置文件" class="headerlink" title="修改SSH配置文件"></a>修改SSH配置文件</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vim etc/ssh/sshd_config</span><br><span class="line">修改配置</span><br><span class="line">Subsystem sftp internal-sftp</span><br><span class="line">UsePAM <span class="literal">yes</span></span><br><span class="line">Match<span class="built_in"> user </span>sftpuser</span><br><span class="line">ForceCommand internal-sftp</span><br><span class="line">ChrootDirectory /home/sftpuser</span><br></pre></td></tr></table></figure><h3 id="重启SSH服务"><a href="#重启SSH服务" class="headerlink" title="重启SSH服务"></a>重启SSH服务</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service sshd restart</span></span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>1.sftpuser通过SFTP登录后，访问目录将会被限制在/home/sftpuser.</p><p>2.sftpuser通过SFTP登录后，写入文件时，会提示访问文件夹无权限的解决方法。</p><blockquote><ul><li>在服务器上利用root账户，将/home/sftpuser权限变更为777。</li></ul></blockquote><blockquote><ul><li>sftpuser账户SFTP创建文件夹temp。</li></ul></blockquote><blockquote><ul><li>将原目录权限修改回755(如果不修改会导致sftpuser登录失败)。</li></ul></blockquote><blockquote><ul><li>后续sftpuser远程在temp文件夹内，可实现所有操作。</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云OSS使用记录</title>
      <link href="/2018/11/06/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/11/06/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2015</span>年。</span><br><span class="line">当前阿里云 OSS 的情况可能同本文描述的存在偏差。</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="开通OSS服务"><a href="#开通OSS服务" class="headerlink" title="开通OSS服务"></a>开通OSS服务</h3><p>通过控制台开通。</p><h3 id="创建Bucket"><a href="#创建Bucket" class="headerlink" title="创建Bucket"></a>创建Bucket</h3><p>通过控制台开通，也可以通过调用API开通。</p><p>创建过程中，需要设置地域，还要设置权限。</p><p>不同地域访问的入口URL不同，值得注意的是，URL还区分公网入口和内网入口。</p><p>如青岛节点：</p><p>外网地址： oss-cn-qingdao.aliyuncs.com</p><p>内网地址： oss-cn-qingdao-internal.aliyuncs.com</p><p>公网调用，会收取流量费用，内网地址仅允许所在节点的内网服务器调用，可达到节省流量的效果。</p><p>在青岛节点申请名为的test的Bucket。</p><p>公网地址：test.oss-cn-qingdao.aliyuncs.com</p><p>内网地址：test.oss-cn-qingdao-internal.aliyuncs.com</p><p>权限分为三种：</p><p>公共读写：任何人均可操作此Bucket中的数据，包括匿名用户，慎用。</p><p>公共读：只有此Bucket的拥有者可做写操作，任何人可做读操作，常用。</p><p>私有：只有Bucket的拥有者可做读写操作。</p><h3 id="申请API"><a href="#申请API" class="headerlink" title="申请API"></a>申请API</h3><p>阿里云首页——用户中心——用户中心——我的服务——安全认证——创建Accesskey。</p><p>申请过程中，需要输入手机验证码。</p><h3 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h3><p>python版本：<a href="http://aliyunecs.oss-cn-hangzhou.aliyuncs.com/OSS_Python_API_20140509.zip" target="_blank" rel="noopener">http://aliyunecs.oss-cn-hangzhou.aliyuncs.com/OSS_Python_API_20140509.zip</a></p><p>开发指南：<a href="http://aliyun_portal_storage.oss.aliyuncs.com/oss_api/oss_pythondoc/OSS_Python_SDK.pdf" target="_blank" rel="noopener">http://aliyun_portal_storage.oss.aliyuncs.com/oss_api/oss_pythondoc/OSS_Python_SDK.pdf</a></p><h3 id="Bucket操作"><a href="#Bucket操作" class="headerlink" title="Bucket操作"></a>Bucket操作</h3><p>在控制台和SDK均可实现完整的操作，包括新建和删除Bucket节点，上传、删除、读取Object。</p><h3 id="Bucket的使用"><a href="#Bucket的使用" class="headerlink" title="Bucket的使用"></a>Bucket的使用</h3><h4 id="网页文件"><a href="#网页文件" class="headerlink" title="网页文件"></a>网页文件</h4><p>将静态网站文件上传至Bucket，绑定域名，即可实现访问。</p><p>Bucket管理——选择Bucket名称——点击浏览——Bucket属性——域名绑定。</p><p>域名绑定方法：下载验证文件，上传至原网站根目录，通过验证后，即可修改原网站域名解析，CNAME到Bucket地址。</p><p>CDN加速：开通CDN加速后——CDN域名列表——添加新域名——选择Bucket域名——指定Bucket域名和绑定域名——完成配置。</p><h4 id="图片文件"><a href="#图片文件" class="headerlink" title="图片文件"></a>图片文件</h4><p>将图片文件上次至Bucket，绑定域名，即可自动实现图片访问域名加速，同时支持服务端图片处理。</p><p>根据测试情况，仅支持图片文件，判断图片文件的标准不是后缀名，而是文件内容。</p><p>比如将图片文件x.jpg修改为x.txt，依然是正常的，但是将文本文件x.txt修改为x.jgp，是无法访问的。</p><p>Bucket管理——选择Bucket名称——点击浏览——Bucket属性——图片管理——域名绑定<br>域名绑定方式同上。</p><h4 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h4><p>在域名绑定验证成功后，自动完成配置</p><p>生成三个域名：</p><p>当前绑定的域名： image.xxx.com</p><p>图片服务的域名： xxx-image.img-cn-qingdao.aliyuncs.com</p><p>CDN加速的域名： image.xxx.com.w.alikunlun.com</p><h4 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h4><p>网页文件和图片文件上传操作没有区别，均可通过公网和内网的地址进行文件上传。</p><p>在不使用CDN加速的情况下，若使用OSS地址直接访问，没有任何区别。</p><p>在配置CDN后，存在明显的差异：</p><p>网页文件需要手动设置CDN加速，访问时，文件类型不受限制。</p><p>图片文件自动设置CDN加速，仅有图片文件才能被正常访问。</p><p>图片文件配置方式的优势在于，可实现文件的服务端实时处理。</p><p>比如：<a href="http://image.xxx.com/x.jpg@1e_400w_390h_1c_0i_1o_90Q_1x.jpg，可立即实现文件大小的转换" target="_blank" rel="noopener">http://image.xxx.com/x.jpg@1e_400w_390h_1c_0i_1o_90Q_1x.jpg，可立即实现文件大小的转换</a></p><p>网页文件配置方式的优势在于，使用CDN加速时，访问时不受文件类型的限制。</p><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h3><p>下载Python的阿里云OSS的SDK。</p><p><a href="http://aliyunecs.oss-cn-hangzhou.aliyuncs.com/OSS_Python_API_20140509.zip" target="_blank" rel="noopener">http://aliyunecs.oss-cn-hangzhou.aliyuncs.com/OSS_Python_API_20140509.zip</a></p><p>解压缩后安装<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python setup<span class="selector-class">.py</span> install</span><br></pre></td></tr></table></figure></p><p>安装完成后，初步调试这个SDK，因为python版本原因，模块引用告警</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">python2</span>.6/<span class="title">site</span>-<span class="title">packages</span>/<span class="title">oss</span>-0.1.3-<span class="title">py2</span>.6.<span class="title">egg</span>/<span class="title">oss</span>/<span class="title">oss_util</span>.<span class="title">py</span>:21: <span class="title">DeprecationWarning</span>:<span class="title">the</span> <span class="title">md5</span> <span class="title">module</span> <span class="title">is</span> <span class="title">deprecated</span>;</span> use hashlib instead import md5</span><br></pre></td></tr></table></figure><p>根据提示，将import md5 修改为import hashlib即可</p><h3 id="编写监控脚本"><a href="#编写监控脚本" class="headerlink" title="编写监控脚本"></a>编写监控脚本</h3><p>脚本逻辑：</p><p>a.检查bucket信息是否可以正常获取</p><p>b.将本地文件复制一份，修改为随机文件名</p><p>c.将文件上传至OSS，通过CDN地址下载，再删除</p><p>d.删除文件名为随机的文件</p><p>脚本每次执行时，重复上述逻辑</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> oss.oss_api <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_bucket</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#API鉴权</span></span><br><span class="line">    oss = OssAPI(<span class="string">"xxx.aliyuncs.com"</span>,<span class="string">"ID"</span>,<span class="string">"key"</span>)</span><br><span class="line">    <span class="comment">#获取oss信息</span></span><br><span class="line">    osslist = oss.list_all_my_buckets()</span><br><span class="line">    <span class="comment">#判断状态</span></span><br><span class="line">    <span class="keyword">if</span> osslist.status == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_image</span><span class="params">(imagename)</span>:</span></span><br><span class="line">    <span class="comment">#API鉴权</span></span><br><span class="line">    oss = OssAPI(<span class="string">"xxx.aliyuncs.com"</span>,<span class="string">"ID"</span>,<span class="string">"key"</span>)</span><br><span class="line">    <span class="comment">#上传图片</span></span><br><span class="line">    res = oss.put_object_from_file(<span class="string">"bucket_name"</span>,imagename,imagename)</span><br><span class="line">    <span class="comment">#判断状态</span></span><br><span class="line">    <span class="keyword">if</span> res.status == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_image</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#检查下载返回码</span></span><br><span class="line">    <span class="keyword">if</span> urllib.urlopen(url).getcode() == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_image</span><span class="params">(imagename)</span>:</span></span><br><span class="line">    <span class="comment">#API鉴权</span></span><br><span class="line">    oss = OssAPI(<span class="string">"xxx.aliyuncs.com"</span>,<span class="string">"ID"</span>,<span class="string">"key"</span>)</span><br><span class="line">    <span class="comment">#删除图片</span></span><br><span class="line">    res = oss.delete_object(<span class="string">"bucket_name"</span>,imagename)</span><br><span class="line">    <span class="comment">#判断状态</span></span><br><span class="line">    <span class="keyword">if</span> res.status == <span class="number">204</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> list_bucket() == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#获取bucket列表失败</span></span><br><span class="line">            <span class="keyword">print</span> <span class="number">2</span> </span><br><span class="line">            sys.exit(<span class="number">0</span>)   </span><br><span class="line">    </span><br><span class="line">        newimage =  <span class="string">''</span>.join(random.sample(<span class="string">'zyxwvutsrqponmlkjihgfedcba'</span>,<span class="number">6</span>)) + <span class="string">'.jpg'</span></span><br><span class="line">        <span class="comment">#复制文件，修改文件名</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">"image.jpg"</span>):</span><br><span class="line">            shutil.copyfile(<span class="string">"image.jpg"</span>, newimage)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#找不到图片文件</span></span><br><span class="line">            <span class="keyword">print</span> <span class="number">3</span></span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> upload_image(newimage) <span class="keyword">and</span> download_image(<span class="string">"http://CDN域名/"</span>+newimage) <span class="keyword">and</span> del_image(newimage):</span><br><span class="line">            os.remove(newimage)</span><br><span class="line">            <span class="keyword">print</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS安装Mysql双主</title>
      <link href="/2018/11/06/CentOS%E5%AE%89%E8%A3%85Mysql%E5%8F%8C%E4%B8%BB/"/>
      <url>/2018/11/06/CentOS%E5%AE%89%E8%A3%85Mysql%E5%8F%8C%E4%B8%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2016</span>年。</span><br><span class="line">介绍 Mysql 双主的安装方法。</span><br></pre></td></tr></table></figure><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>操作系统:CentOS 7 64bit</p><p>MySQL:5.6.34</p><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>采用 yum 方式安装，配置异地双主 MySQL 服务器群集，实现数据异地同步。</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="安装-MySQL-服务"><a href="#安装-MySQL-服务" class="headerlink" title="安装 MySQL 服务"></a>安装 MySQL 服务</h3><h4 id="1-安装-yum-数据源"><a href="#1-安装-yum-数据源" class="headerlink" title="1.安装 yum 数据源"></a>1.安装 yum 数据源</h4><p>Mysql 官网上最新版本已经更新到 5.7 ，我们要安装的是 5.6 版本</p><p>下载 yum 数据源文件</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mysql57-community-release-el7-<span class="number">9</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><p>安装 rpm 包</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo yum localinstall mysql57-community-release-el7-<span class="number">9</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><p>配置数据源，修改 enabled，关闭 mysql57，打开 mysql56</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/mysql-community.repo</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable to use MySQL 5.6</span></span><br><span class="line">[mysql56-community]</span><br><span class="line"><span class="attribute">name</span>=MySQL 5.6<span class="built_in"> Community </span>Server</span><br><span class="line"><span class="attribute">baseurl</span>=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><br><span class="line"><span class="attribute">enabled</span>=1</span><br><span class="line"><span class="attribute">gpgcheck</span>=1</span><br><span class="line"><span class="attribute">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class="line"></span><br><span class="line">[mysql57-community]</span><br><span class="line"><span class="attribute">name</span>=MySQL 5.7<span class="built_in"> Community </span>Server</span><br><span class="line"><span class="attribute">baseurl</span>=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/                                           </span><br><span class="line"><span class="attribute">enabled</span>=0                                                                                                       </span><br><span class="line"><span class="attribute">gpgcheck</span>=1                                                                                                      </span><br><span class="line"><span class="attribute">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure><h4 id="2-安装-MySQL-服务"><a href="#2-安装-MySQL-服务" class="headerlink" title="2.安装 MySQL 服务"></a>2.安装 MySQL 服务</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> mysql-community-<span class="keyword">server</span></span><br><span class="line">sudo systemctl <span class="keyword">enable</span> mysqld</span><br><span class="line">sudo systemctl <span class="keyword">start</span> mysqld</span><br></pre></td></tr></table></figure><h4 id="3-安全配置初始化"><a href="#3-安全配置初始化" class="headerlink" title="3.安全配置初始化"></a>3.安全配置初始化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><h4 id="4-修改数据文件保存位置"><a href="#4-修改数据文件保存位置" class="headerlink" title="4.修改数据文件保存位置"></a>4.修改数据文件保存位置</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop mysqld</span><br><span class="line">sudo mkdir /storage/mysql</span><br><span class="line">sudo chown <span class="symbol">mysql:</span>mysql /storage/mysql</span><br><span class="line">cd /var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span></span></span><br><span class="line">sudo mv /var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>/* /<span class="title">storage</span>/<span class="title">mysql</span></span></span><br></pre></td></tr></table></figure><p>修改 MySQL 配置文件，重启服务</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/my.<span class="keyword">cnf</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">datadir</span>=/storage/mysql</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="literal">start</span> mysqld</span><br></pre></td></tr></table></figure><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">新建数据库</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> dbname;</span><br><span class="line">新建用户</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br><span class="line">用户授权访问数据库</span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> dbname.* <span class="keyword">TO</span> username@<span class="string">"%"</span>;</span><br><span class="line">权限更新</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h3 id="同步配置"><a href="#同步配置" class="headerlink" title="同步配置"></a>同步配置</h3><h4 id="新建账户"><a href="#新建账户" class="headerlink" title="新建账户"></a>新建账户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">新建同步用户</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'replicate'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br><span class="line">权限更新</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h4 id="master1配置"><a href="#master1配置" class="headerlink" title="master1配置"></a>master1配置</h4><p>新建 binlog 目录</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">mkdir</span> -p /storage/<span class="keyword">log</span></span><br><span class="line">sudo <span class="keyword">chown</span> mysql:mysql /storage/<span class="keyword">log</span></span><br></pre></td></tr></table></figure><p>修改 /etc/my.cnf</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">log-bin</span>=/storage/log/mysql-bin.log</span><br><span class="line"><span class="attr">read-only</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auto-increment-offset</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">auto-increment-increment</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>重启 mysql 服务</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo systemctl restart mysqld</span></span><br></pre></td></tr></table></figure><p>检查 /storage/log 目录中是否有 binlog 文件生成</p><p>查看主服务器状态</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">mysql&gt; show <span class="keyword">master</span> <span class="title">status</span>\G;</span><br></pre></td></tr></table></figure><p>记录下 File 和 Position</p><h4 id="master2配置"><a href="#master2配置" class="headerlink" title="master2配置"></a>master2配置</h4><p>新建 binlog 目录</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">mkdir</span> -p /storage/<span class="keyword">log</span></span><br><span class="line">sudo <span class="keyword">chown</span> mysql:mysql /storage/<span class="keyword">log</span></span><br></pre></td></tr></table></figure><p>修改 /etc/my.cnf</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">server-id</span>=2</span><br><span class="line"><span class="attribute">log-bin</span>=/storage/log/mysql-bin.log</span><br><span class="line"></span><br><span class="line"><span class="attribute">relay-log</span>=/storage/log/mysqld-relay-bin.log</span><br><span class="line">log-slave-updates</span><br><span class="line"></span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=information_schema.%</span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=mysql.%</span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=performance_schema.%</span><br></pre></td></tr></table></figure><p>重启 mysql 服务</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo systemctl restart mysqld</span></span><br></pre></td></tr></table></figure><p>检查 /storage/log 目录中是否有 binlog 文件生成</p><p>启动同步</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"></span><br><span class="line">mysql&gt; CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">    -&gt; <span class="attribute">MASTER_HOST</span>=<span class="string">'master'</span>,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_USER</span>=<span class="string">'replicate'</span>,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_PASSWORD</span>=<span class="string">'password'</span>,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_CONNECT_RETRY</span>=60,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_LOG_FILE</span>=<span class="string">'master1的File'</span>,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_LOG_POS</span>=master1的Position;</span><br><span class="line">    </span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>检查状态</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">show</span> slave <span class="built_in">status</span>\G;</span><br></pre></td></tr></table></figure><p>重点检查下列两项</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Slave_IO_Running:</span> <span class="literal">Yes</span></span><br><span class="line"><span class="attr">Slave_SQL_Running:</span> <span class="literal">Yes</span></span><br></pre></td></tr></table></figure><p>若不为 Yes ，则需要排查原因</p><p>可能存在的问题</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Last_IO_Error: Fatal error: The slave I/O thread stops because master <span class="keyword">and</span> slave have equal MySQL<span class="built_in"> server </span>UUIDs; </span><br><span class="line">these UUIDs must be different <span class="keyword">for</span> replication <span class="keyword">to</span> work.</span><br></pre></td></tr></table></figure><p>原因为 master2 由 master1 的虚拟机复制而来，删除 master2 的 /storage/mysql/auto.cnf，重启 mysqld 服务即可</p><p>至此 master2 已配置为 master1 的备机</p><p>配置 master1 为 master1 的备机过程，同上面的方法类似<br><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">master2 注意调整下子增长ID的步长</span><br><span class="line"><span class="attribute">auto-increment-offset</span> = <span class="number">2</span></span><br><span class="line"><span class="attribute">auto-increment-increment</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>最终配置完成后，两台服务器的配置如下:</p><p>master1</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">server-id</span>=1</span><br><span class="line"><span class="attribute">log-bin</span>=/storage/log/mysql-bin.log</span><br><span class="line"><span class="attribute">read-only</span>=0</span><br><span class="line"></span><br><span class="line"><span class="attribute">relay-log</span>=/storage/log/mysqld-relay-bin.log</span><br><span class="line">log-slave-updates</span><br><span class="line"></span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=information_schema.%</span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=mysql.%</span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=performance_schema.%</span><br><span class="line"></span><br><span class="line">auto-increment-offset = 1</span><br><span class="line">auto-increment-increment = 2</span><br></pre></td></tr></table></figure><p>master2</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">server-id</span>=2</span><br><span class="line"><span class="attribute">log-bin</span>=/storage/log/mysql-bin.log</span><br><span class="line"><span class="attribute">read-only</span>=0</span><br><span class="line"></span><br><span class="line"><span class="attribute">relay-log</span>=/storage/log/mysqld-relay-bin.log</span><br><span class="line">log-slave-updates</span><br><span class="line"></span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=information_schema.%</span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=mysql.%</span><br><span class="line"><span class="attribute">replicate_wild_ignore_table</span>=performance_schema.%</span><br><span class="line"></span><br><span class="line">auto-increment-offset = 2</span><br><span class="line">auto-increment-increment = 2</span><br></pre></td></tr></table></figure><p>binlog-do-db、binlog-ignore-db、replicate-do-db、replicate-ignore-db使用存在一定的风险</p><p>推荐使用在主机端不设置 binlog 的生成条件，在备机端设置同步的对象replicate_wild_ignore_table</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>CentOS安装OpenVPN</title>
      <link href="/2018/11/06/CentOS%E5%AE%89%E8%A3%85OpenVPN/"/>
      <url>/2018/11/06/CentOS%E5%AE%89%E8%A3%85OpenVPN/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2015</span>年。</span><br><span class="line">OpenVPN 是主流的开源 VPN 解决方案。</span><br></pre></td></tr></table></figure><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>CentOS版本:6.4</p><p>OpenVPN版本：2.3.4</p><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>使用VPN，实现广域网内服务器之间的安全互访。</p><p>选择OpenVPN，因为其在可靠性方面值得信赖，在后续的使用中，证明了这一点。</p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1.安装依赖包</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> openssl-devel lzo-devel pam-devel gcc</span><br></pre></td></tr></table></figure><h3 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2.下载安装包"></a>2.下载安装包</h3><p>从官网下载安装包openvpn-2.3.4.tar.gz，解压</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><h3 id="3-安装easy-rsa"><a href="#3-安装easy-rsa" class="headerlink" title="3.安装easy-rsa"></a>3.安装easy-rsa</h3><p>新建/etc/openvpn目录，下载easy-rsa</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/OpenVPN/</span>easy-rsa<span class="regexp">/archive/</span>release<span class="regexp">/2.x.zip</span></span><br></pre></td></tr></table></figure><p>解压上述文件，进入解压后的目录</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">cp -r <span class="string">./easy-rsa</span> <span class="string">/etc/openvpn</span></span><br></pre></td></tr></table></figure><p>修改/etc/openvpn/easy-rsa/2.0/var文件</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># These are the default values for fields</span></span><br><span class="line"><span class="comment"># which will be placed in the certificate.</span></span><br><span class="line"><span class="comment"># Don't leave any of these fields blank.</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KEY_COUNTRY</span>=<span class="string">"xx"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KEY_PROVINCE</span>=<span class="string">"xx"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KEY_CITY</span>=<span class="string">"xx"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KEY_ORG</span>=<span class="string">"xx"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KEY_EMAIL</span>=<span class="string">"xxxx"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KEY_OU</span>=<span class="string">"xx"</span></span><br></pre></td></tr></table></figure><p>检查本机安装的openssl版本:</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">rpm -<span class="selector-tag">q</span> openssl</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">openssl-1</span><span class="selector-class">.0</span><span class="selector-class">.1e-16</span><span class="selector-class">.el6_5</span><span class="selector-class">.15</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure><p>重命名预置的openssl配置文件</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span><span class="number">2.0</span><span class="regexp">/openssl-1.0.0.cnf /</span>etc<span class="regexp">/openvpn/</span>easy-rsa<span class="regexp">/2.0/</span>openssl.cnf</span><br></pre></td></tr></table></figure><h3 id="4-生成key"><a href="#4-生成key" class="headerlink" title="4.生成key"></a>4.生成key</h3><p>在/etc/openvpn/easy-rsa/2.0执行下列命令</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">. ./vars</span><br><span class="line">./clean-all</span><br><span class="line">./build-ca server</span><br><span class="line">./build-key-server<span class="built_in"> server </span>#服务端密钥</span><br><span class="line">./build-key xxx #xxx为客户端名称</span><br><span class="line">./build-dh #Diffie Hellman参数</span><br></pre></td></tr></table></figure><h3 id="5-开启包转发"><a href="#5-开启包转发" class="headerlink" title="5.开启包转发"></a>5.开启包转发</h3><p>编辑/etc/sysctl.conf，修改</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_forward</span> = <span class="number">0</span>为net<span class="selector-class">.ipv4</span><span class="selector-class">.ip_forward</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>保存，运行<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sysctl</span> –p</span><br></pre></td></tr></table></figure></p><p>配置生效,修改防火墙策略</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">iptables -t<span class="built_in"> nat </span>-A POSTROUTING -s 10.8.0.0/24 -j SNAT --to-source xx.xx.xx.xx (xx.xx.xx.xx为公网IP)</span><br></pre></td></tr></table></figure><h3 id="6-配置文件"><a href="#6-配置文件" class="headerlink" title="6.配置文件"></a>6.配置文件</h3><p>从源码包中获取配置文件模板</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/root/</span>download<span class="regexp">/openvpn-2.3.4/</span>sample<span class="regexp">/sample-config-files/</span>server.conf <span class="regexp">/etc/</span>openvpn<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">loacl xx<span class="selector-class">.xx</span><span class="selector-class">.xx</span><span class="selector-class">.xx</span></span><br><span class="line">ca /etc/openvpn/keys/ca.crt</span><br><span class="line">cert /etc/openvpn/keys/server.crt</span><br><span class="line">key /etc/openvpn/keys/server.key</span><br><span class="line">dh /etc/openvpn/keys/dh2048.pem</span><br><span class="line">push <span class="string">"redirect-gateway def1 bypass-dhcp"</span></span><br></pre></td></tr></table></figure><h3 id="7-服务端启动"><a href="#7-服务端启动" class="headerlink" title="7.服务端启动"></a>7.服务端启动</h3><p>screen启动：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">openvpn <span class="params">--config</span> <span class="string">/etc/openvpn/server.conf</span></span><br></pre></td></tr></table></figure><p>后台启动：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">openvpn <span class="params">--config</span> <span class="string">/etc/openvpn/server.conf</span> &amp;</span><br></pre></td></tr></table></figure><h3 id="8-客户端配置"><a href="#8-客户端配置" class="headerlink" title="8.客户端配置"></a>8.客户端配置</h3><p>安装Openvpn客户端，将服务端生成的密钥文件</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ca.crt</span><br><span class="line">client.crt</span><br><span class="line">client.key</span><br></pre></td></tr></table></figure><p>放在客户端安装目录的config目录</p><p>修改客户端配置文件client.ovpn</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">remote xx<span class="selector-class">.xx</span><span class="selector-class">.xx</span><span class="selector-class">.xx</span> <span class="number">1194</span> (服务端IP)</span><br><span class="line">ca ca.crt</span><br><span class="line">cert client.crt</span><br><span class="line">key client.key</span><br></pre></td></tr></table></figure><h3 id="9-启动客户端"><a href="#9-启动客户端" class="headerlink" title="9.启动客户端"></a>9.启动客户端</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>启动方式，同服务端相同</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>以管理员权限启动客户端OpenVPN GUI</p><p>点击Connect</p><h3 id="10-固定客户端IP地址"><a href="#10-固定客户端IP地址" class="headerlink" title="10.固定客户端IP地址"></a>10.固定客户端IP地址</h3><p>打开配置</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">client-<span class="built_in">config</span>-<span class="keyword">dir </span>ccd</span><br></pre></td></tr></table></figure><p>在/etc/openvpn新建ccd目录</p><p>在ccd目录中新建以客户端key为名称的文件，如client(无后缀名)</p><p>文件内容ifconfig-push 10.8.0.5 10.8.0.6</p><p>openvpn只支持255.255.255.252 的子网</p><p>252子网只有三个IP，客户端，服务器，广播地址</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">如子网10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.36</span> 主机10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.37</span> 10<span class="selector-class">.8</span><span class="selector-class">.37</span> 广播地址10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.39</span></span><br><span class="line">子网10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.40</span> 主机10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.41</span> 10<span class="selector-class">.8</span><span class="selector-class">.42</span> 广播地址10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.43</span></span><br><span class="line">子网10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.44</span> 主机10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.45</span> 10<span class="selector-class">.8</span><span class="selector-class">.46</span> 广播地址10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.47</span></span><br><span class="line">子网10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.48</span> 主机10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.49</span> 10<span class="selector-class">.8</span><span class="selector-class">.50</span> 广播地址10<span class="selector-class">.8</span><span class="selector-class">.0</span><span class="selector-class">.51</span></span><br></pre></td></tr></table></figure><h3 id="11-客户端证书注销"><a href="#11-客户端证书注销" class="headerlink" title="11.客户端证书注销"></a>11.客户端证书注销</h3><p>进入 /etc/openvpn/easy-rsa/2.0 目录</p><p>执行 . ./vars 命令</p><p>./revoke-full xxx （ xxx 为待注销的客户端名称）</p><p>keys 目录生成一个 crl.pem</p><p>在 服务端 server.conf 配置中，增加配置</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">crl-verify <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span><span class="number">2.0</span><span class="regexp">/keys/</span>crl.pem</span><br></pre></td></tr></table></figure><p>重启服务端生效</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>CentOS安装Gitoite双机</title>
      <link href="/2018/11/06/CentOS%E5%AE%89%E8%A3%85Gitoite%E5%8F%8C%E6%9C%BA/"/>
      <url>/2018/11/06/CentOS%E5%AE%89%E8%A3%85Gitoite%E5%8F%8C%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2015</span>年。</span><br><span class="line">Gitoite 可实现具有权限管理的 Git 服务。</span><br></pre></td></tr></table></figure><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>操作系统:CentOS 6.6 64bit</p><p>git:1.7.1</p><p>gitolite:3.6.3</p><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>git原生不支持权限管理，gitolite可实现git的权限管理</p><p>Control access to many git repositories:<br>read access controlled at the repo level,<br>and write access controlled at the branch/tag/file/directory level, including who can rewind, create, and delete branches/tags.</p><p>办公室有两台服务器，安装git服务，用于研发产物的版本管理，为保证数据安全，安装gitolite，配置双机镜像。</p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h3><p>在两台服务器上均安装git</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure><h3 id="2-安装gitolite"><a href="#2-安装gitolite" class="headerlink" title="2.安装gitolite"></a>2.安装gitolite</h3><p>新建git账户，登录后，安装gitolite</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>://github.com/sitaramc/gitolite</span><br><span class="line">gitolite/install -ln</span><br><span class="line">gitolite setup -pk admin.pub</span><br></pre></td></tr></table></figure><p>admin.pub为gitolite管理员计算机的公钥</p><p>在gitolite管理员计算机上执行</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">git clone git<span class="variable">@host</span><span class="symbol">:gitolite-admin</span></span><br></pre></td></tr></table></figure><p>check出来gitolite-admin库<br>在conf配置库访问权限，keydir保存使用者公钥，commit并push到服务端即可生效</p><h3 id="3-镜像配置"><a href="#3-镜像配置" class="headerlink" title="3.镜像配置"></a>3.镜像配置</h3><p>服务器server1,别名为git1,作为源服务器,修改~/.gitolite.rc文件</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># the Mirroring feature needs this</span></span><br><span class="line">HOSTNAME =&gt; <span class="string">"git1"</span>,</span><br><span class="line">................</span><br><span class="line"><span class="meta"># Uncomment or add new commands here.</span></span><br><span class="line"><span class="meta"># 'create',</span></span><br><span class="line"><span class="meta"># 'fork',</span></span><br><span class="line"><span class="string">'mirror'</span>,</span><br><span class="line"><span class="meta"># 'readme',</span></span><br><span class="line"><span class="meta"># 'sskm',</span></span><br><span class="line"><span class="meta"># 'D',</span></span><br><span class="line"></span><br><span class="line">.................</span><br><span class="line"><span class="meta"># enable mirroring (don't forget to set the HOSTNAME too!)</span></span><br><span class="line"><span class="string">'Mirroring'</span>,</span><br></pre></td></tr></table></figure><p>在git账户下执行：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen</span></span><br></pre></td></tr></table></figure></p><p>生成密钥对，将生成的id_rsa.pub修改为server-git1.pub</p><p>在~/.ssh/config，新增访问另一台服务器的鉴权信息</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">host git2</span><br><span class="line">   <span class="built_in"> user </span>git</span><br><span class="line">    hostname git2.linglongtech.com</span><br><span class="line">   <span class="built_in"> port </span>22</span><br><span class="line">    identityfile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>服务器server2,别名为git2，作为镜像服务器:<br>修改~/.gitolite.rc文件</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># the Mirroring feature needs this</span></span><br><span class="line">HOSTNAME =&gt; <span class="string">"git2"</span>,</span><br><span class="line">................</span><br><span class="line"><span class="meta"># Uncomment or add new commands here.</span></span><br><span class="line"><span class="meta"># 'create',</span></span><br><span class="line"><span class="meta"># 'fork',</span></span><br><span class="line"><span class="string">'mirror'</span>,</span><br><span class="line"><span class="meta"># 'readme',</span></span><br><span class="line"><span class="meta"># 'sskm',</span></span><br><span class="line"><span class="meta"># 'D',</span></span><br><span class="line"></span><br><span class="line">.................</span><br><span class="line"><span class="meta"># enable mirroring (don't forget to set the HOSTNAME too!)</span></span><br><span class="line"><span class="string">'Mirroring'</span>,</span><br></pre></td></tr></table></figure><p>在git账户下执行：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen</span></span><br></pre></td></tr></table></figure></p><p>生成密钥对，将生成的id_rsa.pub修改为server-git2.pub</p><p>在~/.ssh/config，新增访问另一台服务器的鉴权信息</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">host git1</span><br><span class="line">   <span class="built_in"> user </span>git</span><br><span class="line">    hostname git1.linglongtech.com</span><br><span class="line">   <span class="built_in"> port </span>22</span><br><span class="line">    identityfile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>将server-git1.pub和server-git2.pub分别通过gitolite管理员上传到gitolite－admin的keydir目录中<br>分别修改两台gitolite的配置文件，增加下列配置：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">repo @all</span><br><span class="line">RW+ = @admin</span><br><span class="line">option mirror<span class="selector-class">.master</span> = git1</span><br><span class="line">option mirror<span class="selector-class">.slaves</span> = git2</span><br></pre></td></tr></table></figure><p>上述配置，表明对于所有库，均配置为git1为源，git2为镜像</p><p>配置结束后，git2服务器将不再接受git push，而所有推送到git1的请求，将会自动镜像至git2服务器</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gitoite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工作中的小技巧</title>
      <link href="/2018/11/06/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/11/06/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="python搭建最简单WebServer"><a href="#python搭建最简单WebServer" class="headerlink" title="python搭建最简单WebServer"></a>python搭建最简单WebServer</h2><p>Linux下使用命令</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>8080端口启动一个最简单的WebServer，主目录即为当前运行目录，可用于内网文件传输。</p><h2 id="CentOS挂载Windows共享目录"><a href="#CentOS挂载Windows共享目录" class="headerlink" title="CentOS挂载Windows共享目录"></a>CentOS挂载Windows共享目录</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount -t cifs -o username=administrator,passwd=<span class="string">'xxxxxxxx'</span> <span class="regexp">//</span><span class="number">192.168</span>.<span class="number">202.211</span><span class="regexp">/其他 /</span>export<span class="regexp">/share/</span><span class="number">192.168</span>.<span class="number">202.211</span><span class="regexp">/其他</span></span><br></pre></td></tr></table></figure><h2 id="查看服务器公网出口IP"><a href="#查看服务器公网出口IP" class="headerlink" title="查看服务器公网出口IP"></a>查看服务器公网出口IP</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Windows </span><br><span class="line">浏览器访问 http:<span class="regexp">//m</span>embers.<span class="number">3322</span>.org<span class="regexp">/dyndns/g</span>etip</span><br><span class="line"></span><br><span class="line">Linux</span><br><span class="line">curl http:<span class="regexp">//m</span>embers.<span class="number">3322</span>.org<span class="regexp">/dyndns/g</span>etip</span><br></pre></td></tr></table></figure><h2 id="强制删除Git服务端文件"><a href="#强制删除Git服务端文件" class="headerlink" title="强制删除Git服务端文件"></a>强制删除Git服务端文件</h2><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">强制删除git版本库中文件</span></span><br><span class="line"><span class="comment">git</span> <span class="comment">filter</span><span class="literal">-</span><span class="comment">branch</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">force</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">index</span><span class="literal">-</span><span class="comment">filter</span> <span class="comment">'git</span> <span class="comment">rm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">cached</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ignore</span><span class="literal">-</span><span class="comment">unmatch</span> <span class="comment">##local_filename###'</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prune</span><span class="literal">-</span><span class="comment">empty</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">tag</span><span class="literal">-</span><span class="comment">name</span><span class="literal">-</span><span class="comment">filter</span> <span class="comment">cat</span> <span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">all</span></span><br><span class="line"><span class="comment">git</span> <span class="comment">push</span> <span class="comment">origin</span> <span class="comment">master</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">force</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">将##local_filename###替换为需要删除的文件</span></span><br><span class="line"><span class="comment">gitolite需要拥有删除的权限</span></span><br></pre></td></tr></table></figure><h2 id="查看电脑或手机的MAC地址"><a href="#查看电脑或手机的MAC地址" class="headerlink" title="查看电脑或手机的MAC地址"></a>查看电脑或手机的MAC地址</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">http://service.<span class="keyword">tp</span>-link.<span class="keyword">com</span>.<span class="keyword">cn</span>/detail_article_766.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>CentOS安装Keepalived</title>
      <link href="/2018/11/06/CentOS%E5%AE%89%E8%A3%85Keepalived/"/>
      <url>/2018/11/06/CentOS%E5%AE%89%E8%A3%85Keepalived/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2015</span> 年。</span><br><span class="line">Keepalived 是在传统网络中，常用的网络容灾方案。</span><br></pre></td></tr></table></figure><p>CentOS 6.5 64bit</p><p>Keepalived v1.2.19</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>www.keepalived.org<span class="regexp">/software/</span>keepalived-<span class="number">1.2</span>.<span class="number">19</span>.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf keepalived-<span class="number">1.2</span>.<span class="number">19</span>.tar.gz</span><br><span class="line"></span><br><span class="line">sudo yum install -y openssl openssl-devel</span><br><span class="line"></span><br><span class="line">.<span class="regexp">/configure --prefix=/</span>work<span class="regexp">/admin/</span>keepalived</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/work/</span>admin<span class="regexp">/keepalived/</span>etc<span class="regexp">/keepalived/</span>keepalived.conf</span><br></pre></td></tr></table></figure><p>主机</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     mail@server.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from mail@server.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id AGENT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">  <span class="built_in"> script </span><span class="string">"nc -w 0 192.168.80.194 8309"</span></span><br><span class="line">   interval 3</span><br><span class="line">   weight -20</span><br><span class="line">   fall 3</span><br><span class="line">   rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_196 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">   <span class="built_in"> interface </span>eth0</span><br><span class="line">    virtual_router_id 196</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.80.196</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备机</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     mail@server.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from mail@server.com</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id AGENT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">  <span class="built_in"> script </span><span class="string">"nc -w 0 192.168.80.195 8309"</span></span><br><span class="line">   interval 3</span><br><span class="line">   weight -20</span><br><span class="line">   fall 3</span><br><span class="line">   rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_196 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">   <span class="built_in"> interface </span>eth0</span><br><span class="line">    virtual_router_id 196</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.80.196</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防火墙</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">防火墙开放vrrp协议：</span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line">新增一行：-A INPUT -p<span class="built_in"> vrrp </span>-j ACCEPT</span><br><span class="line">保存后，重启iptables</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">sudo <span class="meta-keyword">/work/</span>admin<span class="meta-keyword">/keepalived/</span>sbin/keepalived -f <span class="meta-keyword">/work/</span>admin<span class="meta-keyword">/keepalived/</span>etc<span class="meta-keyword">/keepalived/</span>keepalived.conf</span><br><span class="line"></span><br><span class="line">检查keepalived运行状况：</span><br><span class="line">vim <span class="meta-keyword">/var/</span>log/messages</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Keepalived </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS连接PPTP服务端</title>
      <link href="/2018/11/06/CentOS%E8%BF%9E%E6%8E%A5PPTP%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>/2018/11/06/CentOS%E8%BF%9E%E6%8E%A5PPTP%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">本文写于 2016年。</span><br><span class="line">记录 CentOS 连接<span class="built_in"> PPTP </span>服务端的过程。</span><br></pre></td></tr></table></figure><p>CentOS版本:7.1 64bit</p><h2 id="连接方法："><a href="#连接方法：" class="headerlink" title="连接方法："></a>连接方法：</h2><h3 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1.安装依赖包</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum install<span class="built_in"> pptp </span>pptp-setup</span><br></pre></td></tr></table></figure><h3 id="2-初始化配置"><a href="#2-初始化配置" class="headerlink" title="2.初始化配置"></a>2.初始化配置</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">pptpsetup</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span> <span class="comment">名称</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">server</span> <span class="comment">服务器地址</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">username</span> <span class="comment">用户名</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">password</span> <span class="comment">密码</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">encrypt</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">start</span></span><br></pre></td></tr></table></figure><h3 id="3-路由配置"><a href="#3-路由配置" class="headerlink" title="3.路由配置"></a>3.路由配置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">route</span> <span class="selector-tag">add</span> <span class="selector-tag">-net</span> 172<span class="selector-class">.16</span><span class="selector-class">.16</span><span class="selector-class">.0</span> <span class="selector-tag">netmask</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> <span class="selector-tag">dev</span> <span class="selector-tag">ppp0</span></span><br></pre></td></tr></table></figure><h3 id="4-启动连接"><a href="#4-启动连接" class="headerlink" title="4.启动连接"></a>4.启动连接</h3><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">pppd <span class="built_in">call</span> 名称</span><br></pre></td></tr></table></figure><h3 id="5-断开连接"><a href="#5-断开连接" class="headerlink" title="5.断开连接"></a>5.断开连接</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ps -ef | grep pptp</span><br><span class="line">kill 上面查询到的进程 Pid</span><br></pre></td></tr></table></figure><h2 id="VPN自动检测重连脚本"><a href="#VPN自动检测重连脚本" class="headerlink" title="VPN自动检测重连脚本"></a>VPN自动检测重连脚本</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="attribute">VPN</span>=`/usr/sbin/ifconfig | grep ppp0`</span><br><span class="line"><span class="attribute">date</span>=`/usr/bin/date`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$VPN</span>"</span> ]</span><br><span class="line"></span><br><span class="line">then</span><br><span class="line">    echo <span class="variable">$date</span> <span class="string">"offline"</span> &gt;&gt; /root/script/vpn_reconnect.log</span><br><span class="line">    /usr/sbin/pppd call build</span><br><span class="line"></span><br><span class="line">    sleep 5</span><br><span class="line"></span><br><span class="line">    /usr/sbin<span class="built_in">/route </span><span class="builtin-name">add</span> -net 172.16.16.231 netmask 255.255.255.255 dev ppp0</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    echo <span class="variable">$date</span> <span class="string">"online"</span> &gt;&gt; /root/script/vpn_reconnect.log</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>计划任务如果不设置环境变量，可能会出现命令执行失败的问题</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Jan <span class="number">18</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">02</span> localhost pppd[<span class="number">20850</span>]: pppd <span class="number">2.4</span><span class="number">.5</span> started <span class="keyword">by</span> root, uid <span class="number">0</span></span><br><span class="line">Jan <span class="number">18</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">02</span> localhost pppd[<span class="number">20850</span>]: Couldn't <span class="keyword">get</span> channel <span class="built_in">number</span>: Input/output <span class="keyword">error</span></span><br><span class="line">Jan <span class="number">18</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">02</span> localhost pppd[<span class="number">20850</span>]: Exit.</span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">PATH=<span class="regexp">/usr/local</span><span class="regexp">/sbin:/usr</span><span class="regexp">/local/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span></span><br><span class="line">*<span class="regexp">/1 * * * * /root</span><span class="regexp">/script/vpn</span>_reconnect.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PPTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS安装Mongodb副本集</title>
      <link href="/2018/11/02/CentOS%E5%AE%89%E8%A3%85Mongodb%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
      <url>/2018/11/02/CentOS%E5%AE%89%E8%A3%85Mongodb%E5%89%AF%E6%9C%AC%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2015</span> 年。</span><br><span class="line">MongoDB 是业界比较流行的文档数据库。</span><br></pre></td></tr></table></figure><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>操作系统:CentOS 7 64bit</p><p>MongoDB:3.0.4</p><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>采用二进制安装包方式安装，配置 MongoDB 副本集</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="启动-MongoDB"><a href="#启动-MongoDB" class="headerlink" title="启动 MongoDB"></a>启动 MongoDB</h4><p>下载版本，解压后，可直接启动</p><p>副本集启动命令</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/work/admin/mongodb-linux-x86_64-rhel70-3.0.4/bin/mongod</span> <span class="params">--dbpath</span> <span class="string">/work/admin/mongodb-linux-x86_64-rhel70-3.0.4/data</span> <span class="params">--logpath</span> <span class="string">/work/admin/mongodb-linux-x86_64-rhel70-3.0.4/logs/mongo.log</span> <span class="params">--oplogSize</span> 1000 <span class="params">--replSet</span> vbox <span class="params">--fork</span></span><br></pre></td></tr></table></figure><h4 id="配置副本集"><a href="#配置副本集" class="headerlink" title="配置副本集"></a>配置副本集</h4><p>进入任一台 mongo 客户端：<br>use admin<br>配置</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">config = &#123; <span class="string">_id:</span><span class="string">"vbox"</span>, <span class="string">members:</span>[</span><br><span class="line">... &#123;<span class="string">_id:</span><span class="number">0</span>,<span class="string">host:</span><span class="string">"192.168.100.1:27017"</span>&#125;,</span><br><span class="line">... &#123;<span class="string">_id:</span><span class="number">1</span>,<span class="string">host:</span><span class="string">"192.168.100.2:27017"</span>&#125;,</span><br><span class="line">... &#123;<span class="string">_id:</span><span class="number">2</span>,<span class="string">host:</span><span class="string">"192.168.100.3:27017"</span>&#125;]</span><br><span class="line">... &#125;</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">rs.initiate(<span class="built_in">config</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">rs.status()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>开启副本集slave可读<br>在所有的机器上执行rs.slaveOk();</p><p>上述配置会失效<br>vi ~/.mongorc.js<br>增加一行rs.slaveOk();</p><p>rs.reconfig()函数修改副本集</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">config</span>=rs.<span class="built_in">config</span>()</span><br><span class="line"><span class="built_in">config</span>.members[<span class="number">0</span>].host=<span class="string">"vboxmongodb1.linglongtech.com:27017"</span></span><br><span class="line">rs.reconfig(<span class="built_in">config</span>)</span><br></pre></td></tr></table></figure><h4 id="修改优先级"><a href="#修改优先级" class="headerlink" title="修改优先级"></a>修改优先级</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">config=rs.config()</span><br><span class="line"></span><br><span class="line">config<span class="selector-class">.members</span>[<span class="number">0</span>]<span class="selector-class">.priority</span> = <span class="number">100</span></span><br><span class="line">config<span class="selector-class">.members</span>[<span class="number">1</span>]<span class="selector-class">.priority</span> = <span class="number">1</span></span><br><span class="line">config<span class="selector-class">.members</span>[<span class="number">2</span>]<span class="selector-class">.priority</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">rs.reconfig(config)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>公有云虚拟机初始化</title>
      <link href="/2018/11/02/%E5%85%AC%E6%9C%89%E4%BA%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2018/11/02/%E5%85%AC%E6%9C%89%E4%BA%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于<span class="number">2017</span>年。</span><br><span class="line">公有云虚拟机初始化配置备忘。</span><br></pre></td></tr></table></figure><p>操作系统版本:CentOS 7.x</p><p>系统初始化配置，部分修改无法满足要求，需要进行一些特殊操作。</p><h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line">fdisk <span class="string">/dev/vdb</span></span><br><span class="line">mkfs -t xfs <span class="string">/dev/vdb1</span></span><br><span class="line"></span><br><span class="line">mkdir <span class="string">/work</span></span><br><span class="line">mount <span class="string">/dev/vdb1</span> <span class="string">/work</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"/dev/vdb1 /work xfs defaults 0 0"</span> &gt;&gt; <span class="string">/etc/fstab</span></span><br></pre></td></tr></table></figure><h3 id="新建账户，修改密码"><a href="#新建账户，修改密码" class="headerlink" title="新建账户，修改密码"></a>新建账户，修改密码</h3><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">passwd</span><br><span class="line">＃增加<span class="literal">admin</span>用户</span><br><span class="line">useradd <span class="literal">admin</span> -b /work</span><br><span class="line">passwd <span class="literal">admin</span></span><br></pre></td></tr></table></figure><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"hostname"</span> &gt; <span class="string">/etc/hostname</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"127.0.0.1 localhost hostname"</span> &gt; <span class="string">/etc/hosts</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"192.168.100.1 hostname"</span> &gt;&gt; <span class="string">/etc/hosts</span></span><br></pre></td></tr></table></figure><h3 id="修改DNS"><a href="#修改DNS" class="headerlink" title="修改DNS"></a>修改DNS</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"nameserver 119.29.29.29"</span> &gt; /etc/resolv.conf</span><br><span class="line">为避免配置回退，修改网卡配置</span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">将<span class="attribute">PEERDNS</span>=<span class="literal">yes</span>修改为PEERDNS=no</span><br><span class="line">增加配置：</span><br><span class="line"><span class="attribute">DNS1</span>=192.168.101.6</span><br><span class="line"><span class="attribute">DNS2</span>=192.168.101.7</span><br><span class="line"></span><br><span class="line">CentOS 7.4 以上版本实用命令行</span><br><span class="line">nmcli<span class="built_in"> connection </span>show</span><br><span class="line">nmcli con mod eth0 ipv4.dns <span class="string">"192.168.101.6 192.168.101.7"</span></span><br><span class="line">nmcli con up eth0</span><br></pre></td></tr></table></figure><h3 id="修改用户登录超时时间"><a href="#修改用户登录超时时间" class="headerlink" title="修改用户登录超时时间"></a>修改用户登录超时时间</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"TMOUT=600"</span> <span class="meta">&gt;&gt; </span>/etc/profile</span><br></pre></td></tr></table></figure><h3 id="关闭root远程登录"><a href="#关闭root远程登录" class="headerlink" title="关闭root远程登录"></a>关闭root远程登录</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">修改/etc/ssh/sshd_config文件将PermitRootLogin</span> <span class="literal">yes</span><span class="string">修改为PermitRootLogin</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><h3 id="关闭ssh反向解析"><a href="#关闭ssh反向解析" class="headerlink" title="关闭ssh反向解析"></a>关闭ssh反向解析</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">修改/etc/ssh/sshd_config文件将UseDNS</span> <span class="literal">yes</span><span class="string">修改为UseDNS</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><h3 id="启用sudo"><a href="#启用sudo" class="headerlink" title="启用sudo"></a>启用sudo</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">visudo</span><br><span class="line">admin <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure><h3 id="禁用ipv6"><a href="#禁用ipv6" class="headerlink" title="禁用ipv6"></a>禁用ipv6</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">编辑/etc/sysctl.conf</span><br><span class="line">增加两行：</span><br><span class="line">net<span class="selector-class">.ipv6</span><span class="selector-class">.conf</span><span class="selector-class">.all</span><span class="selector-class">.disable_ipv6</span> = <span class="number">1</span></span><br><span class="line">net<span class="selector-class">.ipv6</span><span class="selector-class">.conf</span><span class="selector-class">.default</span><span class="selector-class">.disable_ipv6</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="修改用户进程参数"><a href="#修改用户进程参数" class="headerlink" title="修改用户进程参数"></a>修改用户进程参数</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.<span class="keyword">conf</span></span><br><span class="line"><span class="comment">*          soft    nproc     102400                                                               </span></span><br><span class="line">root       soft    nproc     unlimited                                                            </span><br><span class="line"><span class="comment">*          soft    nofile    102400                                                               </span></span><br><span class="line"><span class="comment">*          hard    nofile    102400                                                               </span></span><br><span class="line"><span class="comment">*          soft    core      512000                                                               </span></span><br><span class="line"><span class="comment">*          hard    core      512000</span></span><br></pre></td></tr></table></figure><h3 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">将yum更新为<span class="number">163</span></span><br><span class="line">http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/.help/</span>centos.html</span><br><span class="line">删除<span class="regexp">/etc/yum</span>.repos.d所有文件</span><br><span class="line">下载http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/.help/</span>CentOS7-Base-<span class="number">163</span>.repo 重命名为CentOS-Base.repo</span><br></pre></td></tr></table></figure><h3 id="修改系统编码"><a href="#修改系统编码" class="headerlink" title="修改系统编码"></a>修改系统编码</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.conf</span><br><span class="line">中文环境</span><br><span class="line">LANG=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line">英文环境</span><br><span class="line">LANG=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">重启系统后生效</span><br></pre></td></tr></table></figure><h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum -y install gcc wget vim systat<span class="built_in"> screen </span>telnet git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS使用Rsync</title>
      <link href="/2018/11/01/CentOS%E4%BD%BF%E7%94%A8Rsync/"/>
      <url>/2018/11/01/CentOS%E4%BD%BF%E7%94%A8Rsync/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于<span class="number">2014</span>年。</span><br><span class="line">Rsync 是个人使用过的，最好用的文件同步工具。</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>CentOS 平台使用 yum install rsync 安装。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>本地两个文件夹同步</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">rsync -avz <span class="comment">--progress 源文件夹 目标文件夹</span></span><br></pre></td></tr></table></figure><p>远程文件夹同步，可设置ssh免密</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">rsync -avz <span class="comment">--progress 远程源文件夹 本地目标文件夹</span></span><br><span class="line">password:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Rsync </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS安装Nginx</title>
      <link href="/2018/11/01/CentOS%E5%AE%89%E8%A3%85Nginx/"/>
      <url>/2018/11/01/CentOS%E5%AE%89%E8%A3%85Nginx/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2014</span>年。</span><br><span class="line">Nginx 是业界最流行的七层负载均衡方案。</span><br></pre></td></tr></table></figure><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><blockquote><ul><li>CentOS 7 64bit</li><li>nginx 1.10.1</li></ul></blockquote><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>安装Nginx，对外提供Web服务</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>nginx.org<span class="regexp">/download/</span>nginx-<span class="number">1.10</span>.<span class="number">1</span>.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">nginx-1</span><span class="selector-class">.10</span><span class="selector-class">.1</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>安装过程中需要的依赖包</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">yum</span> <span class="comment">install</span> <span class="literal">-</span><span class="comment">y</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">c</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">gzip</span> <span class="comment">zlib</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">openssl</span> <span class="comment">openssl</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">pcre</span><span class="literal">-</span><span class="comment">devel</span></span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> nginx-1.10.1</span><br><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/work/admin/nginx</span>  <span class="comment">#prefix参数，指定安排目录</span></span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure><h4 id="检查配置并启动"><a href="#检查配置并启动" class="headerlink" title="检查配置并启动"></a>检查配置并启动</h4><p>修改配置文件</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/nginx/</span>conf<span class="regexp">/nginx.conf</span></span><br></pre></td></tr></table></figure><p>配置测试</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx -t</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx</span></span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx -s reload</span></span><br></pre></td></tr></table></figure><h4 id="安装-SSL-证书"><a href="#安装-SSL-证书" class="headerlink" title="安装 SSL 证书"></a>安装 SSL 证书</h4><h5 id="生成CSR文件"><a href="#生成CSR文件" class="headerlink" title="生成CSR文件"></a>生成CSR文件</h5><p>可利用在线工具或者Openssl命令行生成CSR文件，使用在线工具更加简单一些。</p><p>生成后，得到两个文件，SSL.CSR和SSL.KEY，SSL.KEY务必要保管好。</p><h5 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h5><p>向证书服务商提供SSL.CSR文件，申请证书，经过付费或免费流程，得到证书文件CRT。</p><p>部分服务商还要求在颁发的证书后，增加中间证书的内容，比如<a href="http://www.myssl.cn/。" target="_blank" rel="noopener">http://www.myssl.cn/。</a></p><h5 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h5><p>将SSL.KEY重命名为server.key，证书文件重命名为server.crt，两个文件上传至Nginx的Conf目录。</p><p>修改Nginx配置文件如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">      <span class="attribute">listen</span>       <span class="number">443</span>;</span><br><span class="line">      <span class="attribute">server_name</span>  xxx.com;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">ssl</span>                  <span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">ssl_certificate</span>      server.crt;</span><br><span class="line">      <span class="attribute">ssl_certificate_key</span>  server.key;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">location</span> / &#123;</span><br><span class="line">          <span class="attribute">root</span>   html;</span><br><span class="line">          <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意：如果使用root或sudo权限，务必保证权限无误，启动账户必须同nginx各目录账户所有者一致。</p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>非root账户启动，启动后账户默认为nobody<br>下载大文件时，客户端出现206错误</p><p>解决方法：nginx目录下所以文件和文件夹所有者修改为启动账户<br>若使用root或sudo方式启动，配置文件中user需要修改为启动账户</p><h3 id="网站自签名证书"><a href="#网站自签名证书" class="headerlink" title="网站自签名证书"></a>网站自签名证书</h3><p>为 Nginx 生成网站签名证书，对外提供 HTTPS 访问。</p><h4 id="开启-SSL"><a href="#开启-SSL" class="headerlink" title="开启 SSL"></a>开启 SSL</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/work/admin/nginx</span> <span class="params">--with-http_ssl_module</span></span><br></pre></td></tr></table></figure><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out xxx<span class="selector-class">.xxx</span><span class="selector-class">.com</span><span class="selector-class">.key</span> <span class="number">1024</span></span><br><span class="line">openssl req -new -key xxx<span class="selector-class">.xxx</span><span class="selector-class">.com</span><span class="selector-class">.key</span> -out xxx<span class="selector-class">.xxx</span><span class="selector-class">.com</span><span class="selector-class">.csr</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> xxx<span class="selector-class">.xxx</span><span class="selector-class">.com</span><span class="selector-class">.key</span> -out xxx<span class="selector-class">.xxx</span><span class="selector-class">.com_nopwd</span><span class="selector-class">.key</span></span><br><span class="line">openssl x509 -req -days <span class="number">3650</span> -<span class="keyword">in</span> xxx<span class="selector-class">.xxx</span><span class="selector-class">.com</span><span class="selector-class">.csr</span> -signkey xxx<span class="selector-class">.xxx</span><span class="selector-class">.com_nopwd</span><span class="selector-class">.key</span> -out xxx<span class="selector-class">.xxx</span><span class="selector-class">.com</span><span class="selector-class">.crt</span></span><br></pre></td></tr></table></figure><p>xxx.xxx.com为网站域名</p><p>注意，填写证书信息时，Common Name 要填写网站域名</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">Common <span class="keyword">Name</span> (eg, your <span class="keyword">name</span> <span class="keyword">or</span> your server<span class="string">'s hostname) []:xxx.xxx.com</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS安装HAProxy</title>
      <link href="/2018/11/01/CentOS%E5%AE%89%E8%A3%85HAProxy/"/>
      <url>/2018/11/01/CentOS%E5%AE%89%E8%A3%85HAProxy/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2014</span> 年。</span><br><span class="line">Haproxy 是主流的负载均衡方案，常用于四层负载。</span><br></pre></td></tr></table></figure><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>CentOS 7 64bit<br>HAProxy 1.6.9</p><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>安装 HAProxy，对外提供 TCP 反向代理服务</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>www.haproxy.org<span class="regexp">/download/</span><span class="number">1.6</span><span class="regexp">/src/</span>haproxy-<span class="number">1.6</span>.<span class="number">9</span>.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2.解压缩"></a>2.解压缩</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">haproxy-1</span><span class="selector-class">.6</span><span class="selector-class">.9</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><h4 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3.编译安装"></a>3.编译安装</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd haproxy-1.6.9</span><br><span class="line">make <span class="attribute">TARGET</span>=linux2628 <span class="attribute">PRFIX</span>=/work/admin/haprpxy  ##根据内核版本选择TARGET</span><br><span class="line">make install <span class="attribute">PREFIX</span>=/work/admin/haproxy</span><br></pre></td></tr></table></figure><h4 id="4-初始化配置"><a href="#4-初始化配置" class="headerlink" title="4.初始化配置"></a>4.初始化配置</h4><p>目录初始化</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /work/admin/haproxy</span><br><span class="line"><span class="keyword">mkdir</span> logs</span><br><span class="line"><span class="keyword">mkdir</span> <span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>配置文件初始化</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="keyword">conf</span></span><br><span class="line"><span class="keyword">vim</span> haproxy.cfg</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line"></span><br><span class="line">    daemon</span><br><span class="line">    nbproc 2</span><br><span class="line">    maxconn 65535</span><br><span class="line">    pidfile /work/admin/haproxy/logs/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line"></span><br><span class="line">    mode tcp</span><br><span class="line">    maxconn 65535</span><br><span class="line">    retries 3</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option redispatch</span><br><span class="line">    option abortonclose</span><br><span class="line">    timeout connect 3000ms</span><br><span class="line">    timeout<span class="built_in"> client </span>50000ms</span><br><span class="line">    timeout<span class="built_in"> server </span>50000ms</span><br><span class="line"></span><br><span class="line">    listen server</span><br><span class="line">    bind 0.0.0.0:8080</span><br><span class="line">    balance roundrobin</span><br><span class="line">    mode   tcp</span><br><span class="line">   <span class="built_in"> server </span>server1 192.168.1.1:8080 weight 1 maxconn 10240 check inter 10s</span><br><span class="line"></span><br><span class="line">    listen status</span><br><span class="line">    bind 0.0.0.0:8888</span><br><span class="line">    mode http</span><br><span class="line">    stats enable</span><br><span class="line">    stats uri /status</span><br><span class="line">    stats auth admin:password</span><br><span class="line">    stats realm (Haproxy\ statistic)</span><br></pre></td></tr></table></figure><h4 id="5-命令"><a href="#5-命令" class="headerlink" title="5.命令"></a>5.命令</h4><p>启动</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>sbin<span class="regexp">/haproxy -f /</span>work<span class="regexp">/admin/</span>haproxy<span class="regexp">/conf/</span>haproxy.cfg</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>sbin<span class="regexp">/haproxy -f /</span>work<span class="regexp">/admin/</span>haproxy<span class="regexp">/conf/</span>haproxy.cfg -st `cat <span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>logs<span class="regexp">/haproxy.pid`</span></span><br></pre></td></tr></table></figure><p>平滑重启</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>sbin<span class="regexp">/haproxy -f /</span>work<span class="regexp">/admin/</span>haproxy<span class="regexp">/conf/</span>haproxy.cfg -sf `cat <span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>logs<span class="regexp">/haproxy.pid`</span></span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">killall haproxy</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">重启参数-st</span><br><span class="line">-st &lt;pidlist&gt;</span><br><span class="line">Send TERMINATE signal <span class="built_in">to</span> <span class="keyword">the</span> pids <span class="keyword">in</span> pidlist <span class="keyword">after</span> startup. The processes which receive this signal will <span class="built_in">wait</span> immediately terminate, closing all active sessions. This option must be specified <span class="keyword">last</span>, followed <span class="keyword">by</span> <span class="keyword">any</span> <span class="built_in">number</span> <span class="keyword">of</span> PIDs. Technically speaking, SIGTTOU <span class="keyword">and</span> SIGTERM are sent.</span><br><span class="line">平滑重启参数-sf</span><br><span class="line">-sf &lt;pidlist&gt;</span><br><span class="line">Send FINISH signal <span class="built_in">to</span> <span class="keyword">the</span> pids <span class="keyword">in</span> pidlist <span class="keyword">after</span> startup. The processes which receive this signal will <span class="built_in">wait</span> <span class="keyword">for</span> all sessions <span class="built_in">to</span> finish <span class="keyword">before</span> exiting. This option must be specified <span class="keyword">last</span>, followed <span class="keyword">by</span> <span class="keyword">any</span> <span class="built_in">number</span> <span class="keyword">of</span> PIDs. Technically speaking, SIGTTOU <span class="keyword">and</span> SIGUSR1 are sent.</span><br></pre></td></tr></table></figure><h4 id="6-端口耗尽问题"><a href="#6-端口耗尽问题" class="headerlink" title="6.端口耗尽问题"></a>6.端口耗尽问题</h4><p>可参考：<a href="http://blog.sina.com.cn/s/blog_704836f40101jv9h.html（未验证）" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_704836f40101jv9h.html（未验证）</a></p><h4 id="7-开启rsyslog日志"><a href="#7-开启rsyslog日志" class="headerlink" title="7.开启rsyslog日志"></a>7.开启rsyslog日志</h4><p>haproxy增加配置</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span></span><br><span class="line">    <span class="keyword">log</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>   local0</span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line">defaults</span><br><span class="line">    <span class="keyword">log</span>   <span class="built_in">global</span></span><br></pre></td></tr></table></figure><p>修改rsyslog配置</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>rsyslog.conf</span><br><span class="line"><span class="comment"># Provides UDP syslog reception</span></span><br><span class="line"><span class="variable">$ModLoad</span> imudp</span><br><span class="line"><span class="variable">$UDPServerRun</span> <span class="number">514</span></span><br><span class="line"></span><br><span class="line">local0.*    <span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>logs<span class="regexp">/haproxy.log</span></span><br></pre></td></tr></table></figure><p>重启rsyslog服务</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service rsyslog restart</span></span><br></pre></td></tr></table></figure><p>重启haproxy服务</p><p>日志输出到/work/admin/harpxy/logs/haproxy.log</p>]]></content>
      
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python守护进程</title>
      <link href="/2018/10/31/Python%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/31/Python%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2014</span>年。</span><br><span class="line">当前项目，进程守护一般使用 Supervisor。</span><br></pre></td></tr></table></figure><p>利用Hyperic调用Python，实现进程守护。</p><p>调用操作系统方法获取进程信息，判断进程是否存在。</p><p>Linux和Windows均支持，区别在于获取进程信息和启动进程的方法不同。</p><p>代码如下：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">名称：进程检查脚本</span></span><br><span class="line"><span class="string">作者：wjzhu</span></span><br><span class="line"><span class="string">时间：2014-06-30</span></span><br><span class="line"><span class="string">功能：根据进程名称，判断进程是否存在，执行相应操作</span></span><br><span class="line"><span class="string">参数：p_name：进程名称|p_path：进程启动路径</span></span><br><span class="line"><span class="string">返回值：0:进程存在，正常退出|1：进程不存在，执行命令后，进程存在|2：其他异常情况</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">update:2014-07-29 启动进程前调用os.chdir()方法，改变当前工作目录，解决部分进程启动时依赖工作目录问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化进程名称和命令路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用参数方式传递程序名称和程序路径</span></span><br><span class="line"><span class="comment">#p_name = sys.argv[1]</span></span><br><span class="line"><span class="comment">#p_path = sys.argv[2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Linux</span></span><br><span class="line">p_name = <span class="string">"redis"</span></span><br><span class="line">p_path = <span class="string">"/usr/local/redis-2.8.11/src/redis-server/usr/local/redis-2.8.11/redis.conf"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Windows</span></span><br><span class="line"><span class="comment">#p_name = "filezilla.exe"</span></span><br><span class="line"><span class="comment">#p_path = "C:\\Program Files (x86)\\FileZilla FTP Client\\filezilla.exe"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Linux平台调用ps命令/Win平台调用tasklist命令，判断进程是否存在，传入进程名称，返回为查询得到的进程个数</span></span><br><span class="line">def process_exit(process_name):</span><br><span class="line">    <span class="comment">#Linux</span></span><br><span class="line">    p_checkresp = os.popen(<span class="string">'ps aux | grep "'</span> + process_name + <span class="string">'" | grep -v grep'</span>).readlines()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Windows，为避免进程名称被截断，输出格式为csv，使用tasklist /fo csv</span></span><br><span class="line">    <span class="comment">#p_checkresp = os.popen('tasklist /fo csv | find "' + process_name + '"').readlines()</span></span><br><span class="line">    return len(p_checkresp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Linx平台调用os.system方法启动命令/Win平台调用os.startfile方法启动命令，传入命令路径，无返回值</span></span><br><span class="line">def process_exec(process_path):</span><br><span class="line">    <span class="comment">#将工作目录切换到启动脚本所在目录，解决部分进程启动时依赖工作目录问题</span></span><br><span class="line">    os.chdir(os.path.dirname(process_path))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Linxu</span></span><br><span class="line">    os.system(process_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Windows</span></span><br><span class="line">    <span class="comment">#os.startfile(process_path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#查询进程个数大于1，返回0，不做任何操作，退出</span></span><br><span class="line">    <span class="keyword">if</span> process_exit(p_name) &gt;= <span class="number">1</span>:</span><br><span class="line">        print <span class="number">0</span></span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#查询进程个数等于0</span></span><br><span class="line">    elif process_exit(p_name) == <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#执行启动命令</span></span><br><span class="line">        process_exec(p_path)</span><br><span class="line">        <span class="comment">#查询进程个数大于1，返回1，启动成功，退出</span></span><br><span class="line">        <span class="keyword">if</span> process_exit(p_name) &gt;= <span class="number">1</span>:</span><br><span class="line">            print <span class="number">1</span></span><br><span class="line">            sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">#启动失败，返回2，退出</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print <span class="number">2</span></span><br><span class="line">            sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="comment">#其他问题，返回2，退出</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print <span class="number">2</span></span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac版Outlook崩溃处理</title>
      <link href="/2018/10/31/Mac%E7%89%88Outlook%E5%B4%A9%E6%BA%83%E5%A4%84%E7%90%86/"/>
      <url>/2018/10/31/Mac%E7%89%88Outlook%E5%B4%A9%E6%BA%83%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2014</span>年。</span><br><span class="line">本问题可能会重现，作为经验总结，保留此文章。</span><br></pre></td></tr></table></figure><p>OS X版本 10.9.4</p><p>Outlook版本 Mac 2011 14.3.0</p><h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p>在使用Outlook的过程中，没有正常关闭，再次启动时，Outlook界面一闪而过，无法正常启动。</p><p>重新启动Mac系统后，问题依旧。</p><h3 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h3><p>1.使用Microsoft Database Utility重建标识，提示无法重建数据库，返回-18000。</p><p>2.进入Microsoft用户数据Identities目录，备份原先使用的文件夹。</p><p>3.使用Microsoft Database Utility新建一个标识，设置默认，启动Outlook成功。</p><p>4.退出Outlook，删除新标识中database文件，然后将原先标识的Contacts、Events、Rules、Message Attachments、Message Sources、Messages文件夹，全部复制到新的标识文件夹。注意，不要复制Categories、Fold、Folder目录(否则会导致后面的重建步骤失败)。</p><p>5.再次启动Outlook，提示数据库丢失，需要重建，点击重建，等待几分钟后，邮件数据即可恢复。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Outlook </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo使用心得</title>
      <link href="/2018/10/31/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2018/10/31/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>花了一天左右的时间，折腾 Github + Hexo 博客方案。</p><p>整体的使用体验还是很不错的，这里记录一下安装过程和心得体会。</p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>在 Github 创建一个新的仓库，专门用于发表文章，名称必须为：username.github.io，如 zhuwanjun2008.github.io。</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>在本机安装 Git 客户端和 NodeJS (含 npm )。</p><h4 id="安装-Hexo-命令行"><a href="#安装-Hexo-命令行" class="headerlink" title="安装 Hexo 命令行"></a>安装 Hexo 命令行</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><h4 id="初始化名称为-blog-本地工作区"><a href="#初始化名称为-blog-本地工作区" class="headerlink" title="初始化名称为 blog 本地工作区"></a>初始化名称为 blog 本地工作区</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">hexo</span> init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">blog</span></span><br><span class="line"><span class="keyword">npm </span>install</span><br></pre></td></tr></table></figure><h4 id="关联-Github-仓库"><a href="#关联-Github-仓库" class="headerlink" title="关联 Github 仓库"></a>关联 Github 仓库</h4><p>修改本地工作区的 _config.yml 文件</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:zhuwanjun2008/zhuwanjun2008.github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 在工作区执行</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"文章标题"</span>    <span class="meta"># 新建文章</span></span><br><span class="line">hexo g    <span class="meta"># 生成静态页面</span></span><br><span class="line">hexo s    <span class="meta"># 本地浏览</span></span><br><span class="line">hexo d    <span class="meta"># 部署</span></span><br><span class="line">hexo h    <span class="meta"># 更多命令，参见帮助</span></span><br></pre></td></tr></table></figure><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>安装完，Hexo 默认主题使用 landscape，本来想使用大家推荐的 next，偶然间看到 maupassant ，觉得更加简洁，更适合前端小白同学使用，哈哈。</p><p><a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant 主页</a></p><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>gitment 作者的服务器，近期有点问题，需要自己构建代理服务器，有点麻烦，所以使用 gitalk。</p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>感觉搜索引擎有点重，直接使用 self_search</p><h4 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h4><p>wordcount</p><h4 id="访问统计"><a href="#访问统计" class="headerlink" title="访问统计"></a>访问统计</h4><p>busuanzi</p><p>近期服务域名变更，需要修改，编辑 themes/maupassant/layout/post.pug 文件</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.busuanzi == <span class="literal">true</span></span><br><span class="line">  script(src=<span class="string">'https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'</span>, <span class="keyword">async</span>)</span><br><span class="line">  span<span class="meta">#busuanzi_container_page_pv= ' | '</span></span><br><span class="line">    span<span class="meta">#busuanzi_value_page_pv</span></span><br><span class="line">    span= <span class="string">' '</span> + __(<span class="string">'Hits'</span>)</span><br></pre></td></tr></table></figure><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p>目前的访问域名为 zhuwanjun2008.github.io，将其修改为个性化域名 wanjun.pro。</p><p>打开 zhuwanjun2008.github.io 的仓库配置，设置 Custom domain 为 wanjun.pro，开启 Enforce HTTPS。</p><p>在 工作区 source 文件夹中，放入名为 CNAME 的文件，文件内容为 wanjun.pro。</p><p>修改 DNS 域名解析，新增 wanjun.pro 到 zhuwanjun2008.github.io 的 CNAME 解析即可。</p><p>使用 Hexo 命令行工具，重新生成静态页面，提交部署即可。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo 官网</a></p><p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7升级系统和内核版本</title>
      <link href="/2018/10/31/CentOS7%E5%8D%87%E7%BA%A7%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC/"/>
      <url>/2018/10/31/CentOS7%E5%8D%87%E7%BA%A7%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>为安装新版本 Kubernetes，升级公有云 CentOS 的系统和内核版本。</p><h2 id="检查系统和内核版本"><a href="#检查系统和内核版本" class="headerlink" title="检查系统和内核版本"></a>检查系统和内核版本</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># cat /etc/redhat-release</span><br><span class="line">CentOS Linux release <span class="number">7.4</span><span class="number">.1708</span> (Core)</span><br><span class="line"></span><br><span class="line"># uname -sr</span><br><span class="line">Linux <span class="number">3.10</span><span class="number">.0</span><span class="number">-693.17</span><span class="number">.1</span>.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum update</span></span><br></pre></td></tr></table></figure><p>更新成功后，重启系统</p><h2 id="检查系统和内核版本-1"><a href="#检查系统和内核版本-1" class="headerlink" title="检查系统和内核版本"></a>检查系统和内核版本</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># cat /etc/redhat-release</span><br><span class="line">CentOS Linux release <span class="number">7.5</span><span class="number">.1804</span> (Core)</span><br><span class="line"></span><br><span class="line"># uname -sr</span><br><span class="line">Linux <span class="number">3.10</span><span class="number">.0</span><span class="number">-693.17</span><span class="number">.1</span>.el7.x86_64</span><br></pre></td></tr></table></figure><p>系统版本已经升级到最新，内核版本未升级。</p><h2 id="更新内核"><a href="#更新内核" class="headerlink" title="更新内核"></a>更新内核</h2><p>安装 ELRepo 库</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># rpm --<span class="keyword">import</span> https:<span class="comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line"># rpm -Uvh http:<span class="comment">//www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span><br></pre></td></tr></table></figure><p>安装最新发行版</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"elrepo-kernel"</span> list available</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum --enablerepo=elrepo-kernel install kernel<span class="_">-lt</span></span></span><br></pre></td></tr></table></figure><p>设置更新后的默认内核</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># grub2-set-default 0</span></span><br><span class="line"><span class="meta"># grub2-editenv list</span></span><br></pre></td></tr></table></figure><p>重启服务器，检查版本号</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">uname</span> <span class="selector-tag">-sr</span></span><br><span class="line"><span class="selector-tag">Linux</span> 4<span class="selector-class">.4</span><span class="selector-class">.161-1</span><span class="selector-class">.el7</span><span class="selector-class">.elrepo</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure><p>删除旧版本(可选)</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># rpm -qa | grep kernel</span><br><span class="line"># yum remove abrt-addon-kerneloops<span class="number">-2.1</span><span class="number">.11</span><span class="number">-48.</span>el7.centos.x86_64 kernel-tools<span class="number">-3.10</span><span class="number">.0</span><span class="number">-693.</span>el7.x86_64 kernel<span class="number">-3.10</span><span class="number">.0</span><span class="number">-693.17</span><span class="number">.1</span>.el7.x86_64 kernel<span class="number">-3.10</span><span class="number">.0</span><span class="number">-693.</span>el7.x86_64 kernel-tools-libs<span class="number">-3.10</span><span class="number">.0</span><span class="number">-693.</span>el7.x86_64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenResty运行Lua示例</title>
      <link href="/2018/10/30/OpenResty%E8%BF%90%E8%A1%8CLua%E7%A4%BA%E4%BE%8B/"/>
      <url>/2018/10/30/OpenResty%E8%BF%90%E8%A1%8CLua%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台。</p><p>更多信息，参考 <a href="http://openresty.org/" target="_blank" rel="noopener">OpenResty 官网</a>。</p><p>安装过程跟 Nginx 基本相同，区别在于安装完成之后，默认安装了很多 Module。</p><p>安装完成后，执行 ./nginx -V 的结果</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">nginx version: openresty/<span class="number">1.13</span>.<span class="number">6.2</span></span><br><span class="line">built <span class="keyword">by</span> gcc <span class="number">4.8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span>.<span class="number">5</span>-<span class="number">28</span>) (GCC) </span><br><span class="line">built <span class="keyword">with</span> OpenSSL <span class="number">1.0</span>.<span class="number">2</span>k-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/work/admin/openresty/nginx --<span class="keyword">with</span>-cc-opt=-O2 --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_devel_kit-<span class="number">0.3</span>.<span class="number">0</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../echo-nginx-<span class="keyword">module</span>-<span class="number">0.61</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../xss-nginx-<span class="keyword">module</span>-<span class="number">0.06</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_coolkit-<span class="number">0.2</span>rc3 --<span class="keyword">add</span>-<span class="keyword">module</span>=../<span class="keyword">set</span>-misc-nginx-<span class="keyword">module</span>-<span class="number">0.32</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../form-input-nginx-<span class="keyword">module</span>-<span class="number">0.12</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../encrypted-session-nginx-<span class="keyword">module</span>-<span class="number">0.08</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../srcache-nginx-<span class="keyword">module</span>-<span class="number">0.31</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_lua-<span class="number">0.10</span>.<span class="number">13</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_lua_upstream-<span class="number">0.07</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../headers-more-nginx-<span class="keyword">module</span>-<span class="number">0.33</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../<span class="keyword">array</span>-<span class="keyword">var</span>-nginx-<span class="keyword">module</span>-<span class="number">0.05</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../memc-nginx-<span class="keyword">module</span>-<span class="number">0.19</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../redis2-nginx-<span class="keyword">module</span>-<span class="number">0.15</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../redis-nginx-<span class="keyword">module</span>-<span class="number">0.3</span>.<span class="number">7</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../rds-json-nginx-<span class="keyword">module</span>-<span class="number">0.15</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../rds-csv-nginx-<span class="keyword">module</span>-<span class="number">0.09</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_stream_lua-<span class="number">0.0</span>.<span class="number">5</span> --<span class="keyword">with</span>-ld-opt=-Wl,-rpath,/work/admin/openresty/luajit/lib --<span class="keyword">with</span>-stream --<span class="keyword">with</span>-stream_ssl_module --<span class="keyword">with</span>-http_ssl_module</span><br></pre></td></tr></table></figure><p>OpenResty 配置文件格式同 Nginx 完全兼容，区别在于可在各个处理阶段中，嵌入 Lua 代码。</p><p>下面是一个示例，在 rewrite 阶段，读取 Post 包请求体中的 JSON 字段，将请求重定向到不同的后端服务上去。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/myweb.log  access;</span></span><br><span class="line">    <span class="attribute">access_log</span>  <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">rewrite_by_lua_block</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">local</span> json = require(<span class="string">"cjson.safe"</span>)</span><br><span class="line"></span><br><span class="line">            ngx.req.read_body()</span><br><span class="line"></span><br><span class="line">            local body_data = ngx.req.get_body_data()</span><br><span class="line">            local body_data_json = json.decode(body_data)</span><br><span class="line"></span><br><span class="line">            if string.find(body_data_json[<span class="string">"key"</span>],<span class="string">"value"</span>) then</span><br><span class="line">                back = <span class="string">"127.0.0.1:10000"</span></span><br><span class="line">            else</span><br><span class="line">                back = <span class="string">"myweb"</span></span><br><span class="line">            end</span><br><span class="line"></span><br><span class="line">            ngx.var.backend = back</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://<span class="variable">$backend</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X_Real_IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X_Forwarded_For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout invalid_header http_404 http_500 http_502 http_503;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OpenResty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新的开始</title>
      <link href="/2018/10/30/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2018/10/30/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>从今天开始，博客从 WordPress 切换为 Hexo。</p><p>后面有两件事情：</p><p>1.原有博客中的部分文章，迁移到新的博客中来。</p><p>2.近期的工作积累，沉淀为技术文章，计划为每周一篇。</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
