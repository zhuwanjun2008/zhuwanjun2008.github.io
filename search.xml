<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CentOS安装HAProxy</title>
      <link href="/2018/11/01/CentOS%E5%AE%89%E8%A3%85HAProxy/"/>
      <url>/2018/11/01/CentOS%E5%AE%89%E8%A3%85HAProxy/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2014</span> 年。</span><br><span class="line">Haproxy 是主流的负载均衡方案，常用于四层负载。</span><br></pre></td></tr></table></figure><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>CentOS 7 64bit<br>HAProxy 1.6.9</p><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>安装 HAProxy，对外提供 TCP 反向代理服务</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>www.haproxy.org<span class="regexp">/download/</span><span class="number">1.6</span><span class="regexp">/src/</span>haproxy-<span class="number">1.6</span>.<span class="number">9</span>.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2.解压缩"></a>2.解压缩</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">haproxy-1</span><span class="selector-class">.6</span><span class="selector-class">.9</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><h4 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3.编译安装"></a>3.编译安装</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd haproxy-1.6.9</span><br><span class="line">make <span class="attribute">TARGET</span>=linux2628 <span class="attribute">PRFIX</span>=/work/admin/haprpxy  ##根据内核版本选择TARGET</span><br><span class="line">make install <span class="attribute">PREFIX</span>=/work/admin/haproxy</span><br></pre></td></tr></table></figure><h4 id="4-初始化配置"><a href="#4-初始化配置" class="headerlink" title="4.初始化配置"></a>4.初始化配置</h4><p>目录初始化</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /work/admin/haproxy</span><br><span class="line"><span class="keyword">mkdir</span> logs</span><br><span class="line"><span class="keyword">mkdir</span> <span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>配置文件初始化</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="keyword">conf</span></span><br><span class="line"><span class="keyword">vim</span> haproxy.cfg</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line"></span><br><span class="line">    daemon</span><br><span class="line">    nbproc 2</span><br><span class="line">    maxconn 65535</span><br><span class="line">    pidfile /work/admin/haproxy/logs/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line"></span><br><span class="line">    mode tcp</span><br><span class="line">    maxconn 65535</span><br><span class="line">    retries 3</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option redispatch</span><br><span class="line">    option abortonclose</span><br><span class="line">    timeout connect 3000ms</span><br><span class="line">    timeout<span class="built_in"> client </span>50000ms</span><br><span class="line">    timeout<span class="built_in"> server </span>50000ms</span><br><span class="line"></span><br><span class="line">    listen server</span><br><span class="line">    bind 0.0.0.0:8080</span><br><span class="line">    balance roundrobin</span><br><span class="line">    mode   tcp</span><br><span class="line">   <span class="built_in"> server </span>server1 192.168.1.1:8080 weight 1 maxconn 10240 check inter 10s</span><br><span class="line"></span><br><span class="line">    listen status</span><br><span class="line">    bind 0.0.0.0:8888</span><br><span class="line">    mode http</span><br><span class="line">    stats enable</span><br><span class="line">    stats uri /status</span><br><span class="line">    stats auth admin:password</span><br><span class="line">    stats realm (Haproxy\ statistic)</span><br></pre></td></tr></table></figure><h4 id="5-命令"><a href="#5-命令" class="headerlink" title="5.命令"></a>5.命令</h4><p>启动</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>sbin<span class="regexp">/haproxy -f /</span>work<span class="regexp">/admin/</span>haproxy<span class="regexp">/conf/</span>haproxy.cfg</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>sbin<span class="regexp">/haproxy -f /</span>work<span class="regexp">/admin/</span>haproxy<span class="regexp">/conf/</span>haproxy.cfg -st `cat <span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>logs<span class="regexp">/haproxy.pid`</span></span><br></pre></td></tr></table></figure><p>平滑重启</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>sbin<span class="regexp">/haproxy -f /</span>work<span class="regexp">/admin/</span>haproxy<span class="regexp">/conf/</span>haproxy.cfg -sf `cat <span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>logs<span class="regexp">/haproxy.pid`</span></span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">killall haproxy</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">重启参数-st</span><br><span class="line">-st &lt;pidlist&gt;</span><br><span class="line">Send TERMINATE signal <span class="built_in">to</span> <span class="keyword">the</span> pids <span class="keyword">in</span> pidlist <span class="keyword">after</span> startup. The processes which receive this signal will <span class="built_in">wait</span> immediately terminate, closing all active sessions. This option must be specified <span class="keyword">last</span>, followed <span class="keyword">by</span> <span class="keyword">any</span> <span class="built_in">number</span> <span class="keyword">of</span> PIDs. Technically speaking, SIGTTOU <span class="keyword">and</span> SIGTERM are sent.</span><br><span class="line">平滑重启参数-sf</span><br><span class="line">-sf &lt;pidlist&gt;</span><br><span class="line">Send FINISH signal <span class="built_in">to</span> <span class="keyword">the</span> pids <span class="keyword">in</span> pidlist <span class="keyword">after</span> startup. The processes which receive this signal will <span class="built_in">wait</span> <span class="keyword">for</span> all sessions <span class="built_in">to</span> finish <span class="keyword">before</span> exiting. This option must be specified <span class="keyword">last</span>, followed <span class="keyword">by</span> <span class="keyword">any</span> <span class="built_in">number</span> <span class="keyword">of</span> PIDs. Technically speaking, SIGTTOU <span class="keyword">and</span> SIGUSR1 are sent.</span><br></pre></td></tr></table></figure><h4 id="6-端口耗尽问题"><a href="#6-端口耗尽问题" class="headerlink" title="6.端口耗尽问题"></a>6.端口耗尽问题</h4><p>可参考：<a href="http://blog.sina.com.cn/s/blog_704836f40101jv9h.html（未验证）" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_704836f40101jv9h.html（未验证）</a></p><h4 id="7-开启rsyslog日志"><a href="#7-开启rsyslog日志" class="headerlink" title="7.开启rsyslog日志"></a>7.开启rsyslog日志</h4><p>haproxy增加配置</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span></span><br><span class="line">    <span class="keyword">log</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>   local0</span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line">defaults</span><br><span class="line">    <span class="keyword">log</span>   <span class="built_in">global</span></span><br></pre></td></tr></table></figure><p>修改rsyslog配置</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>rsyslog.conf</span><br><span class="line"><span class="comment"># Provides UDP syslog reception</span></span><br><span class="line"><span class="variable">$ModLoad</span> imudp</span><br><span class="line"><span class="variable">$UDPServerRun</span> <span class="number">514</span></span><br><span class="line"></span><br><span class="line">local0.*    <span class="regexp">/work/</span>admin<span class="regexp">/haproxy/</span>logs<span class="regexp">/haproxy.log</span></span><br></pre></td></tr></table></figure><p>重启rsyslog服务</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service rsyslog restart</span></span><br></pre></td></tr></table></figure><p>重启haproxy服务</p><p>日志输出到/work/admin/harpxy/logs/haproxy.log</p>]]></content>
      
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python守护进程</title>
      <link href="/2018/10/31/Python%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/31/Python%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2014</span>年。</span><br><span class="line">当前项目，进程守护一般使用 Supervisor。</span><br></pre></td></tr></table></figure><p>利用Hyperic调用Python，实现进程守护。</p><p>调用操作系统方法获取进程信息，判断进程是否存在。</p><p>Linux和Windows均支持，区别在于获取进程信息和启动进程的方法不同。</p><p>代码如下：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">名称：进程检查脚本</span></span><br><span class="line"><span class="string">作者：wjzhu</span></span><br><span class="line"><span class="string">时间：2014-06-30</span></span><br><span class="line"><span class="string">功能：根据进程名称，判断进程是否存在，执行相应操作</span></span><br><span class="line"><span class="string">参数：p_name：进程名称|p_path：进程启动路径</span></span><br><span class="line"><span class="string">返回值：0:进程存在，正常退出|1：进程不存在，执行命令后，进程存在|2：其他异常情况</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">update:2014-07-29 启动进程前调用os.chdir()方法，改变当前工作目录，解决部分进程启动时依赖工作目录问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化进程名称和命令路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用参数方式传递程序名称和程序路径</span></span><br><span class="line"><span class="comment">#p_name = sys.argv[1]</span></span><br><span class="line"><span class="comment">#p_path = sys.argv[2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Linux</span></span><br><span class="line">p_name = <span class="string">"redis"</span></span><br><span class="line">p_path = <span class="string">"/usr/local/redis-2.8.11/src/redis-server/usr/local/redis-2.8.11/redis.conf"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Windows</span></span><br><span class="line"><span class="comment">#p_name = "filezilla.exe"</span></span><br><span class="line"><span class="comment">#p_path = "C:\\Program Files (x86)\\FileZilla FTP Client\\filezilla.exe"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Linux平台调用ps命令/Win平台调用tasklist命令，判断进程是否存在，传入进程名称，返回为查询得到的进程个数</span></span><br><span class="line">def process_exit(process_name):</span><br><span class="line">    <span class="comment">#Linux</span></span><br><span class="line">    p_checkresp = os.popen(<span class="string">'ps aux | grep "'</span> + process_name + <span class="string">'" | grep -v grep'</span>).readlines()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Windows，为避免进程名称被截断，输出格式为csv，使用tasklist /fo csv</span></span><br><span class="line">    <span class="comment">#p_checkresp = os.popen('tasklist /fo csv | find "' + process_name + '"').readlines()</span></span><br><span class="line">    return len(p_checkresp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Linx平台调用os.system方法启动命令/Win平台调用os.startfile方法启动命令，传入命令路径，无返回值</span></span><br><span class="line">def process_exec(process_path):</span><br><span class="line">    <span class="comment">#将工作目录切换到启动脚本所在目录，解决部分进程启动时依赖工作目录问题</span></span><br><span class="line">    os.chdir(os.path.dirname(process_path))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Linxu</span></span><br><span class="line">    os.system(process_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Windows</span></span><br><span class="line">    <span class="comment">#os.startfile(process_path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#查询进程个数大于1，返回0，不做任何操作，退出</span></span><br><span class="line">    <span class="keyword">if</span> process_exit(p_name) &gt;= <span class="number">1</span>:</span><br><span class="line">        print <span class="number">0</span></span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#查询进程个数等于0</span></span><br><span class="line">    elif process_exit(p_name) == <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#执行启动命令</span></span><br><span class="line">        process_exec(p_path)</span><br><span class="line">        <span class="comment">#查询进程个数大于1，返回1，启动成功，退出</span></span><br><span class="line">        <span class="keyword">if</span> process_exit(p_name) &gt;= <span class="number">1</span>:</span><br><span class="line">            print <span class="number">1</span></span><br><span class="line">            sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">#启动失败，返回2，退出</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print <span class="number">2</span></span><br><span class="line">            sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="comment">#其他问题，返回2，退出</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print <span class="number">2</span></span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac版Outlook崩溃处理</title>
      <link href="/2018/10/31/Mac%E7%89%88Outlook%E5%B4%A9%E6%BA%83%E5%A4%84%E7%90%86/"/>
      <url>/2018/10/31/Mac%E7%89%88Outlook%E5%B4%A9%E6%BA%83%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">本文写于 <span class="number">2014</span>年。</span><br><span class="line">本问题可能会重现，作为经验总结，保留此文章。</span><br></pre></td></tr></table></figure><p>OS X版本 10.9.4</p><p>Outlook版本 Mac 2011 14.3.0</p><h3 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h3><p>在使用Outlook的过程中，没有正常关闭，再次启动时，Outlook界面一闪而过，无法正常启动。</p><p>重新启动Mac系统后，问题依旧。</p><h3 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h3><p>1.使用Microsoft Database Utility重建标识，提示无法重建数据库，返回-18000。</p><p>2.进入Microsoft用户数据Identities目录，备份原先使用的文件夹。</p><p>3.使用Microsoft Database Utility新建一个标识，设置默认，启动Outlook成功。</p><p>4.退出Outlook，删除新标识中database文件，然后将原先标识的Contacts、Events、Rules、Message Attachments、Message Sources、Messages文件夹，全部复制到新的标识文件夹。注意，不要复制Categories、Fold、Folder目录(否则会导致后面的重建步骤失败)。</p><p>5.再次启动Outlook，提示数据库丢失，需要重建，点击重建，等待几分钟后，邮件数据即可恢复。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Outlook </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo使用心得</title>
      <link href="/2018/10/31/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2018/10/31/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>花了一天左右的时间，折腾 Github + Hexo 博客方案。</p><p>整体的使用体验还是很不错的，这里记录一下安装过程和心得体会。</p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>在 Github 创建一个新的仓库，专门用于发表文章，名称必须为：username.github.io，如 zhuwanjun2008.github.io。</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>在本机安装 Git 客户端和 NodeJS (含 npm )。</p><h4 id="安装-Hexo-命令行"><a href="#安装-Hexo-命令行" class="headerlink" title="安装 Hexo 命令行"></a>安装 Hexo 命令行</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><h4 id="初始化名称为-blog-本地工作区"><a href="#初始化名称为-blog-本地工作区" class="headerlink" title="初始化名称为 blog 本地工作区"></a>初始化名称为 blog 本地工作区</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">hexo</span> init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">blog</span></span><br><span class="line"><span class="keyword">npm </span>install</span><br></pre></td></tr></table></figure><h4 id="关联-Github-仓库"><a href="#关联-Github-仓库" class="headerlink" title="关联 Github 仓库"></a>关联 Github 仓库</h4><p>修改本地工作区的 _config.yml 文件</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:zhuwanjun2008/zhuwanjun2008.github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 在工作区执行</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"文章标题"</span>    <span class="meta"># 新建文章</span></span><br><span class="line">hexo g    <span class="meta"># 生成静态页面</span></span><br><span class="line">hexo s    <span class="meta"># 本地浏览</span></span><br><span class="line">hexo d    <span class="meta"># 部署</span></span><br><span class="line">hexo h    <span class="meta"># 更多命令，参见帮助</span></span><br></pre></td></tr></table></figure><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>安装完，Hexo 默认主题使用 landscape，本来想使用大家推荐的 next，偶然间看到 maupassant ，觉得更加简洁，更适合前端小白同学使用，哈哈。</p><p><a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant 主页</a></p><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>gitment 作者的服务器，近期有点问题，需要自己构建代理服务器，有点麻烦，所以使用 gitalk。</p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>感觉搜索引擎有点重，直接使用 self_search</p><h4 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h4><p>wordcount</p><h4 id="访问统计"><a href="#访问统计" class="headerlink" title="访问统计"></a>访问统计</h4><p>busuanzi</p><p>近期服务域名变更，需要修改，编辑 themes/maupassant/layout/post.pug 文件</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.busuanzi == <span class="literal">true</span></span><br><span class="line">  script(src=<span class="string">'https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'</span>, <span class="keyword">async</span>)</span><br><span class="line">  span<span class="meta">#busuanzi_container_page_pv= ' | '</span></span><br><span class="line">    span<span class="meta">#busuanzi_value_page_pv</span></span><br><span class="line">    span= <span class="string">' '</span> + __(<span class="string">'Hits'</span>)</span><br></pre></td></tr></table></figure><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p>目前的访问域名为 zhuwanjun2008.github.io，将其修改为个性化域名 wanjun.pro。</p><p>打开 zhuwanjun2008.github.io 的仓库配置，设置 Custom domain 为 wanjun.pro，开启 Enforce HTTPS。</p><p>在 工作区 source 文件夹中，放入名为 CNAME 的文件，文件内容为 wanjun.pro。</p><p>修改 DNS 域名解析，新增 wanjun.pro 到 zhuwanjun2008.github.io 的 CNAME 解析即可。</p><p>使用 Hexo 命令行工具，重新生成静态页面，提交部署即可。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo 官网</a></p><p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7升级系统和内核版本</title>
      <link href="/2018/10/31/CentOS7%E5%8D%87%E7%BA%A7%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC/"/>
      <url>/2018/10/31/CentOS7%E5%8D%87%E7%BA%A7%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>为安装新版本 Kubernetes，升级公有云 CentOS 的系统和内核版本。</p><h2 id="检查系统和内核版本"><a href="#检查系统和内核版本" class="headerlink" title="检查系统和内核版本"></a>检查系统和内核版本</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># cat /etc/redhat-release</span><br><span class="line">CentOS Linux release <span class="number">7.4</span><span class="number">.1708</span> (Core)</span><br><span class="line"></span><br><span class="line"># uname -sr</span><br><span class="line">Linux <span class="number">3.10</span><span class="number">.0</span><span class="number">-693.17</span><span class="number">.1</span>.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum update</span></span><br></pre></td></tr></table></figure><p>更新成功后，重启系统</p><h2 id="检查系统和内核版本-1"><a href="#检查系统和内核版本-1" class="headerlink" title="检查系统和内核版本"></a>检查系统和内核版本</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># cat /etc/redhat-release</span><br><span class="line">CentOS Linux release <span class="number">7.5</span><span class="number">.1804</span> (Core)</span><br><span class="line"></span><br><span class="line"># uname -sr</span><br><span class="line">Linux <span class="number">3.10</span><span class="number">.0</span><span class="number">-693.17</span><span class="number">.1</span>.el7.x86_64</span><br></pre></td></tr></table></figure><p>系统版本已经升级到最新，内核版本未升级。</p><h2 id="更新内核"><a href="#更新内核" class="headerlink" title="更新内核"></a>更新内核</h2><p>安装 ELRepo 库</p><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># rpm --<span class="keyword">import</span> https:<span class="comment">//www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line"># rpm -Uvh http:<span class="comment">//www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span><br></pre></td></tr></table></figure><p>安装最新发行版</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"elrepo-kernel"</span> list available</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum --enablerepo=elrepo-kernel install kernel<span class="_">-lt</span></span></span><br></pre></td></tr></table></figure><p>设置更新后的默认内核</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># grub2-set-default 0</span></span><br><span class="line"><span class="meta"># grub2-editenv list</span></span><br></pre></td></tr></table></figure><p>重启服务器，检查版本号</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">uname</span> <span class="selector-tag">-sr</span></span><br><span class="line"><span class="selector-tag">Linux</span> 4<span class="selector-class">.4</span><span class="selector-class">.161-1</span><span class="selector-class">.el7</span><span class="selector-class">.elrepo</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure><p>删除旧版本(可选)</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># rpm -qa | grep kernel</span><br><span class="line"># yum remove abrt-addon-kerneloops<span class="number">-2.1</span><span class="number">.11</span><span class="number">-48.</span>el7.centos.x86_64 kernel-tools<span class="number">-3.10</span><span class="number">.0</span><span class="number">-693.</span>el7.x86_64 kernel<span class="number">-3.10</span><span class="number">.0</span><span class="number">-693.17</span><span class="number">.1</span>.el7.x86_64 kernel<span class="number">-3.10</span><span class="number">.0</span><span class="number">-693.</span>el7.x86_64 kernel-tools-libs<span class="number">-3.10</span><span class="number">.0</span><span class="number">-693.</span>el7.x86_64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenResty运行Lua示例</title>
      <link href="/2018/10/30/OpenResty%E8%BF%90%E8%A1%8CLua%E7%A4%BA%E4%BE%8B/"/>
      <url>/2018/10/30/OpenResty%E8%BF%90%E8%A1%8CLua%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台。</p><p>更多信息，参考 <a href="http://openresty.org/" target="_blank" rel="noopener">OpenResty 官网</a>。</p><p>安装过程跟 Nginx 基本相同，区别在于安装完成之后，默认安装了很多 Module。</p><p>安装完成后，执行 ./nginx -V 的结果</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">nginx version: openresty/<span class="number">1.13</span>.<span class="number">6.2</span></span><br><span class="line">built <span class="keyword">by</span> gcc <span class="number">4.8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span>.<span class="number">5</span>-<span class="number">28</span>) (GCC) </span><br><span class="line">built <span class="keyword">with</span> OpenSSL <span class="number">1.0</span>.<span class="number">2</span>k-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/work/admin/openresty/nginx --<span class="keyword">with</span>-cc-opt=-O2 --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_devel_kit-<span class="number">0.3</span>.<span class="number">0</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../echo-nginx-<span class="keyword">module</span>-<span class="number">0.61</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../xss-nginx-<span class="keyword">module</span>-<span class="number">0.06</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_coolkit-<span class="number">0.2</span>rc3 --<span class="keyword">add</span>-<span class="keyword">module</span>=../<span class="keyword">set</span>-misc-nginx-<span class="keyword">module</span>-<span class="number">0.32</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../form-input-nginx-<span class="keyword">module</span>-<span class="number">0.12</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../encrypted-session-nginx-<span class="keyword">module</span>-<span class="number">0.08</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../srcache-nginx-<span class="keyword">module</span>-<span class="number">0.31</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_lua-<span class="number">0.10</span>.<span class="number">13</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_lua_upstream-<span class="number">0.07</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../headers-more-nginx-<span class="keyword">module</span>-<span class="number">0.33</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../<span class="keyword">array</span>-<span class="keyword">var</span>-nginx-<span class="keyword">module</span>-<span class="number">0.05</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../memc-nginx-<span class="keyword">module</span>-<span class="number">0.19</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../redis2-nginx-<span class="keyword">module</span>-<span class="number">0.15</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../redis-nginx-<span class="keyword">module</span>-<span class="number">0.3</span>.<span class="number">7</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../rds-json-nginx-<span class="keyword">module</span>-<span class="number">0.15</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../rds-csv-nginx-<span class="keyword">module</span>-<span class="number">0.09</span> --<span class="keyword">add</span>-<span class="keyword">module</span>=../ngx_stream_lua-<span class="number">0.0</span>.<span class="number">5</span> --<span class="keyword">with</span>-ld-opt=-Wl,-rpath,/work/admin/openresty/luajit/lib --<span class="keyword">with</span>-stream --<span class="keyword">with</span>-stream_ssl_module --<span class="keyword">with</span>-http_ssl_module</span><br></pre></td></tr></table></figure><p>OpenResty 配置文件格式同 Nginx 完全兼容，区别在于可在各个处理阶段中，嵌入 Lua 代码。</p><p>下面是一个示例，在 rewrite 阶段，读取 Post 包请求体中的 JSON 字段，将请求重定向到不同的后端服务上去。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/myweb.log  access;</span></span><br><span class="line">    <span class="attribute">access_log</span>  <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">rewrite_by_lua_block</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">local</span> json = require(<span class="string">"cjson.safe"</span>)</span><br><span class="line"></span><br><span class="line">            ngx.req.read_body()</span><br><span class="line"></span><br><span class="line">            local body_data = ngx.req.get_body_data()</span><br><span class="line">            local body_data_json = json.decode(body_data)</span><br><span class="line"></span><br><span class="line">            if string.find(body_data_json[<span class="string">"key"</span>],<span class="string">"value"</span>) then</span><br><span class="line">                back = <span class="string">"127.0.0.1:10000"</span></span><br><span class="line">            else</span><br><span class="line">                back = <span class="string">"myweb"</span></span><br><span class="line">            end</span><br><span class="line"></span><br><span class="line">            ngx.var.backend = back</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://<span class="variable">$backend</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X_Real_IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X_Forwarded_For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout invalid_header http_404 http_500 http_502 http_503;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OpenResty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新的开始</title>
      <link href="/2018/10/30/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2018/10/30/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>从今天开始，博客从 WordPress 切换为 Hexo。</p><p>后面有两件事情：</p><p>1.原有博客中的部分文章，迁移到新的博客中来。</p><p>2.近期的工作积累，沉淀为技术文章，计划为每周一篇。</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
